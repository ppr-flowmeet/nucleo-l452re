
12_lcd_2004a.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000412c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080042cc  080042cc  000142cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004358  08004358  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004358  08004358  00014358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004360  08004360  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004360  08004360  00014360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004364  08004364  00014364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004368  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000070  080043d8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  080043d8  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e42e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e01  00000000  00000000  0002e4ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf8  00000000  00000000  000302d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b30  00000000  00000000  00030ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000225d8  00000000  00000000  000319f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000efb8  00000000  00000000  00053fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0764  00000000  00000000  00062f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001336ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003510  00000000  00000000  0013373c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080042b4 	.word	0x080042b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080042b4 	.word	0x080042b4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <lcd_send_cmd>:
// BL: Backlight, 1 encendido y 0 apagado, asi es el backlight se controlad digitalmente.
// EN: enable, se debe colcoar a 1 cuando se transmite un nuevo comando o dato, al terminar pasar a cero, por esta razon se debe enviar dos veces
// RW: seleccion de escribir o leer, 0 para escribir 1 para leer
// RS: seleccion de registros, 0 para comandos y 1 para datos
void lcd_send_cmd(char cmd)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af02      	add	r7, sp, #8
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xf0);
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	f023 030f 	bic.w	r3, r3, #15
 8000594:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xf0);
 8000596:	79fb      	ldrb	r3, [r7, #7]
 8000598:	011b      	lsls	r3, r3, #4
 800059a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C;  // inicio transmision del primer nible -> [c7 c6 c5 c4] + [BL=1 EN=1 RW=0 RS=0]
 800059c:	7bfb      	ldrb	r3, [r7, #15]
 800059e:	f043 030c 	orr.w	r3, r3, #12
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;  // finalizo transmision del primer nible -> [c7 c6 c5 c4] + [BL=1 EN=0 RW=0 RS=0]
 80005a6:	7bfb      	ldrb	r3, [r7, #15]
 80005a8:	f043 0308 	orr.w	r3, r3, #8
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;  // inicio transmision del segundo nible -> [c7 c6 c5 c4] + [BL=1 EN=1 RW=0 RS=0]
 80005b0:	7bbb      	ldrb	r3, [r7, #14]
 80005b2:	f043 030c 	orr.w	r3, r3, #12
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;  // finalizo transmision del segundo nible -> [c7 c6 c5 c4] + [BL=1 EN=0 RW=0 RS=0]
 80005ba:	7bbb      	ldrb	r3, [r7, #14]
 80005bc:	f043 0308 	orr.w	r3, r3, #8
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4, 1000);
 80005c4:	f107 0208 	add.w	r2, r7, #8
 80005c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2304      	movs	r3, #4
 80005d0:	214e      	movs	r1, #78	; 0x4e
 80005d2:	4803      	ldr	r0, [pc, #12]	; (80005e0 <lcd_send_cmd+0x5c>)
 80005d4:	f000 ffb2 	bl	800153c <HAL_I2C_Master_Transmit>
}
 80005d8:	bf00      	nop
 80005da:	3710      	adds	r7, #16
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20000090 	.word	0x20000090

080005e4 <lcd_send_data>:

// Muy similar a la explicacion del comandos, la linea RS ahora siempre en 1.
// Los datos son caracteres de bits pero se dividiran en dos nibles[d7 d6 d5 d4] + [d3 d2 d1 d0]
void lcd_send_data(char data)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af02      	add	r7, sp, #8
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];

	data_u = (data & 0xf0);
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	f023 030f 	bic.w	r3, r3, #15
 80005f4:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	011b      	lsls	r3, r3, #4
 80005fa:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D;
 80005fc:	7bfb      	ldrb	r3, [r7, #15]
 80005fe:	f043 030d 	orr.w	r3, r3, #13
 8000602:	b2db      	uxtb	r3, r3
 8000604:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;
 8000606:	7bfb      	ldrb	r3, [r7, #15]
 8000608:	f043 0309 	orr.w	r3, r3, #9
 800060c:	b2db      	uxtb	r3, r3
 800060e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;
 8000610:	7bbb      	ldrb	r3, [r7, #14]
 8000612:	f043 030d 	orr.w	r3, r3, #13
 8000616:	b2db      	uxtb	r3, r3
 8000618:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;
 800061a:	7bbb      	ldrb	r3, [r7, #14]
 800061c:	f043 0309 	orr.w	r3, r3, #9
 8000620:	b2db      	uxtb	r3, r3
 8000622:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4, 1000);
 8000624:	f107 0208 	add.w	r2, r7, #8
 8000628:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2304      	movs	r3, #4
 8000630:	214e      	movs	r1, #78	; 0x4e
 8000632:	4803      	ldr	r0, [pc, #12]	; (8000640 <lcd_send_data+0x5c>)
 8000634:	f000 ff82 	bl	800153c <HAL_I2C_Master_Transmit>
}
 8000638:	bf00      	nop
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000090 	.word	0x20000090

08000644 <lcd_clear>:

void lcd_clear()
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80);
 800064a:	2080      	movs	r0, #128	; 0x80
 800064c:	f7ff ff9a 	bl	8000584 <lcd_send_cmd>
	for (int i = 0; i < 80; i++)
 8000650:	2300      	movs	r3, #0
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	e005      	b.n	8000662 <lcd_clear+0x1e>
	{
		lcd_send_data(' ');
 8000656:	2020      	movs	r0, #32
 8000658:	f7ff ffc4 	bl	80005e4 <lcd_send_data>
	for (int i = 0; i < 80; i++)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	3301      	adds	r3, #1
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2b4f      	cmp	r3, #79	; 0x4f
 8000666:	ddf6      	ble.n	8000656 <lcd_clear+0x12>
	}
	cursor.column = 1;
 8000668:	4b05      	ldr	r3, [pc, #20]	; (8000680 <lcd_clear+0x3c>)
 800066a:	2201      	movs	r2, #1
 800066c:	701a      	strb	r2, [r3, #0]
	cursor.row = 1;
 800066e:	4b04      	ldr	r3, [pc, #16]	; (8000680 <lcd_clear+0x3c>)
 8000670:	2201      	movs	r2, #1
 8000672:	705a      	strb	r2, [r3, #1]
	lcd_move_cursor();
 8000674:	f000 f806 	bl	8000684 <lcd_move_cursor>
}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	2000008c 	.word	0x2000008c

08000684 <lcd_move_cursor>:

void lcd_move_cursor()
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
	int cmd;

	cmd = 0x80; //cursor.column;
 800068a:	2380      	movs	r3, #128	; 0x80
 800068c:	607b      	str	r3, [r7, #4]

	switch (cursor.row)
 800068e:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <lcd_move_cursor+0x6c>)
 8000690:	785b      	ldrb	r3, [r3, #1]
 8000692:	3b01      	subs	r3, #1
 8000694:	2b03      	cmp	r3, #3
 8000696:	d827      	bhi.n	80006e8 <lcd_move_cursor+0x64>
 8000698:	a201      	add	r2, pc, #4	; (adr r2, 80006a0 <lcd_move_cursor+0x1c>)
 800069a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800069e:	bf00      	nop
 80006a0:	080006cf 	.word	0x080006cf
 80006a4:	080006b1 	.word	0x080006b1
 80006a8:	080006bb 	.word	0x080006bb
 80006ac:	080006c5 	.word	0x080006c5
	{
	case 1:
		cmd |= 0x00;
		break;
	case 2:
		cmd |= 0x40;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006b6:	607b      	str	r3, [r7, #4]
		break;
 80006b8:	e00a      	b.n	80006d0 <lcd_move_cursor+0x4c>
	case 3:
		cmd |= 0x14;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	f043 0314 	orr.w	r3, r3, #20
 80006c0:	607b      	str	r3, [r7, #4]
		break;
 80006c2:	e005      	b.n	80006d0 <lcd_move_cursor+0x4c>
	case 4:
		cmd |= 0x54;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	f043 0354 	orr.w	r3, r3, #84	; 0x54
 80006ca:	607b      	str	r3, [r7, #4]
		break;
 80006cc:	e000      	b.n	80006d0 <lcd_move_cursor+0x4c>
		break;
 80006ce:	bf00      	nop
	default:
		return;
		break;
	}
	lcd_send_cmd(cmd + cursor.column - 1);
 80006d0:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <lcd_move_cursor+0x6c>)
 80006d2:	781a      	ldrb	r2, [r3, #0]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	4413      	add	r3, r2
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	3b01      	subs	r3, #1
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff ff4f 	bl	8000584 <lcd_send_cmd>
 80006e6:	e000      	b.n	80006ea <lcd_move_cursor+0x66>
		return;
 80006e8:	bf00      	nop
}
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	2000008c 	.word	0x2000008c

080006f4 <lcd_2004_init>:

void lcd_2004_init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80006f8:	2032      	movs	r0, #50	; 0x32
 80006fa:	f000 fbd9 	bl	8000eb0 <HAL_Delay>
	lcd_send_cmd(0x30);
 80006fe:	2030      	movs	r0, #48	; 0x30
 8000700:	f7ff ff40 	bl	8000584 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000704:	2005      	movs	r0, #5
 8000706:	f000 fbd3 	bl	8000eb0 <HAL_Delay>
	lcd_send_cmd(0x30);
 800070a:	2030      	movs	r0, #48	; 0x30
 800070c:	f7ff ff3a 	bl	8000584 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000710:	2001      	movs	r0, #1
 8000712:	f000 fbcd 	bl	8000eb0 <HAL_Delay>
	lcd_send_cmd(0x30);
 8000716:	2030      	movs	r0, #48	; 0x30
 8000718:	f7ff ff34 	bl	8000584 <lcd_send_cmd>
	HAL_Delay(10);
 800071c:	200a      	movs	r0, #10
 800071e:	f000 fbc7 	bl	8000eb0 <HAL_Delay>
	lcd_send_cmd(0x20);  // 4bit mode
 8000722:	2020      	movs	r0, #32
 8000724:	f7ff ff2e 	bl	8000584 <lcd_send_cmd>
	HAL_Delay(10);
 8000728:	200a      	movs	r0, #10
 800072a:	f000 fbc1 	bl	8000eb0 <HAL_Delay>

	// dislay initialisation
	lcd_send_cmd(0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800072e:	2028      	movs	r0, #40	; 0x28
 8000730:	f7ff ff28 	bl	8000584 <lcd_send_cmd>
	HAL_Delay(1);
 8000734:	2001      	movs	r0, #1
 8000736:	f000 fbbb 	bl	8000eb0 <HAL_Delay>
	lcd_send_cmd(0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800073a:	2008      	movs	r0, #8
 800073c:	f7ff ff22 	bl	8000584 <lcd_send_cmd>
	HAL_Delay(1);
 8000740:	2001      	movs	r0, #1
 8000742:	f000 fbb5 	bl	8000eb0 <HAL_Delay>
	lcd_send_cmd(0x01);  // clear display
 8000746:	2001      	movs	r0, #1
 8000748:	f7ff ff1c 	bl	8000584 <lcd_send_cmd>
	HAL_Delay(1);
 800074c:	2001      	movs	r0, #1
 800074e:	f000 fbaf 	bl	8000eb0 <HAL_Delay>
	HAL_Delay(1);
 8000752:	2001      	movs	r0, #1
 8000754:	f000 fbac 	bl	8000eb0 <HAL_Delay>
	lcd_send_cmd(0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000758:	2006      	movs	r0, #6
 800075a:	f7ff ff13 	bl	8000584 <lcd_send_cmd>
	HAL_Delay(1);
 800075e:	2001      	movs	r0, #1
 8000760:	f000 fba6 	bl	8000eb0 <HAL_Delay>
	lcd_send_cmd(0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000764:	200c      	movs	r0, #12
 8000766:	f7ff ff0d 	bl	8000584 <lcd_send_cmd>

	lcd_clear();
 800076a:	f7ff ff6b 	bl	8000644 <lcd_clear>
}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
	...

08000774 <lcd_send_string>:

void lcd_send_string(char *str)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	while (*str)
 800077c:	e03f      	b.n	80007fe <lcd_send_string+0x8a>
	{
		if (*str > ' ' && *str < '~')
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	2b20      	cmp	r3, #32
 8000784:	d918      	bls.n	80007b8 <lcd_send_string+0x44>
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	2b7d      	cmp	r3, #125	; 0x7d
 800078c:	d814      	bhi.n	80007b8 <lcd_send_string+0x44>
		{
			lcd_send_data(*str);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff ff26 	bl	80005e4 <lcd_send_data>
			cursor.column++;
 8000798:	4b1d      	ldr	r3, [pc, #116]	; (8000810 <lcd_send_string+0x9c>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	3301      	adds	r3, #1
 800079e:	b2da      	uxtb	r2, r3
 80007a0:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <lcd_send_string+0x9c>)
 80007a2:	701a      	strb	r2, [r3, #0]
			if(cursor.column > 20)
 80007a4:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <lcd_send_string+0x9c>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b14      	cmp	r3, #20
 80007aa:	d925      	bls.n	80007f8 <lcd_send_string+0x84>
			{
				cursor.column = 1;
 80007ac:	4b18      	ldr	r3, [pc, #96]	; (8000810 <lcd_send_string+0x9c>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	701a      	strb	r2, [r3, #0]
				lcd_move_cursor();
 80007b2:	f7ff ff67 	bl	8000684 <lcd_move_cursor>
			if(cursor.column > 20)
 80007b6:	e01f      	b.n	80007f8 <lcd_send_string+0x84>
			}
		}
		else if (*str == '\n')
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	2b0a      	cmp	r3, #10
 80007be:	d112      	bne.n	80007e6 <lcd_send_string+0x72>
		{
			cursor.column  = 1;
 80007c0:	4b13      	ldr	r3, [pc, #76]	; (8000810 <lcd_send_string+0x9c>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	701a      	strb	r2, [r3, #0]
			cursor.row += 1;
 80007c6:	4b12      	ldr	r3, [pc, #72]	; (8000810 <lcd_send_string+0x9c>)
 80007c8:	785b      	ldrb	r3, [r3, #1]
 80007ca:	3301      	adds	r3, #1
 80007cc:	b2da      	uxtb	r2, r3
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <lcd_send_string+0x9c>)
 80007d0:	705a      	strb	r2, [r3, #1]
			if(cursor.row > 4)
 80007d2:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <lcd_send_string+0x9c>)
 80007d4:	785b      	ldrb	r3, [r3, #1]
 80007d6:	2b04      	cmp	r3, #4
 80007d8:	d902      	bls.n	80007e0 <lcd_send_string+0x6c>
			{
				cursor.row = 1;
 80007da:	4b0d      	ldr	r3, [pc, #52]	; (8000810 <lcd_send_string+0x9c>)
 80007dc:	2201      	movs	r2, #1
 80007de:	705a      	strb	r2, [r3, #1]
			}
			lcd_move_cursor();
 80007e0:	f7ff ff50 	bl	8000684 <lcd_move_cursor>
 80007e4:	e008      	b.n	80007f8 <lcd_send_string+0x84>
		}
		else if (*str == '\r')
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b0d      	cmp	r3, #13
 80007ec:	d104      	bne.n	80007f8 <lcd_send_string+0x84>
		{
			cursor.column = 1;
 80007ee:	4b08      	ldr	r3, [pc, #32]	; (8000810 <lcd_send_string+0x9c>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	701a      	strb	r2, [r3, #0]
			lcd_move_cursor();
 80007f4:	f7ff ff46 	bl	8000684 <lcd_move_cursor>
		}
		else
		{
			// Caracter no esperado
		}
		str++;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	3301      	adds	r3, #1
 80007fc:	607b      	str	r3, [r7, #4]
	while (*str)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d1bb      	bne.n	800077e <lcd_send_string+0xa>
	}
}
 8000806:	bf00      	nop
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	2000008c 	.word	0x2000008c

08000814 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08c      	sub	sp, #48	; 0x30
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char lcd_buffer[LCD_LINE_LENGHT];
	int counter = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800081e:	f000 facb 	bl	8000db8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000822:	f000 f821 	bl	8000868 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000826:	f000 f8e1 	bl	80009ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800082a:	f000 f8af 	bl	800098c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800082e:	f000 f86d 	bl	800090c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_2004_init();
 8000832:	f7ff ff5f 	bl	80006f4 <lcd_2004_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000836:	2120      	movs	r1, #32
 8000838:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800083c:	f000 fdd4 	bl	80013e8 <HAL_GPIO_TogglePin>
	  sniprintf(lcd_buffer, LCD_LINE_LENGHT, "Conteo = %df\n", counter);
 8000840:	1d38      	adds	r0, r7, #4
 8000842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000844:	4a07      	ldr	r2, [pc, #28]	; (8000864 <main+0x50>)
 8000846:	2128      	movs	r1, #40	; 0x28
 8000848:	f003 f8b2 	bl	80039b0 <sniprintf>
	  lcd_send_string(lcd_buffer);
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff ff90 	bl	8000774 <lcd_send_string>

	  //HAL_UART_Transmit(&huart2, (uint8_t *)lcd_buffer, strlen(lcd_buffer), HAL_MAX_DELAY);
	  counter++;
 8000854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000856:	3301      	adds	r3, #1
 8000858:	62fb      	str	r3, [r7, #44]	; 0x2c
	  HAL_Delay(1000);
 800085a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800085e:	f000 fb27 	bl	8000eb0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000862:	e7e8      	b.n	8000836 <main+0x22>
 8000864:	080042cc 	.word	0x080042cc

08000868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b096      	sub	sp, #88	; 0x58
 800086c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086e:	f107 0314 	add.w	r3, r7, #20
 8000872:	2244      	movs	r2, #68	; 0x44
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f003 f892 	bl	80039a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800087c:	463b      	mov	r3, r7
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
 8000888:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800088a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800088e:	f001 f9ed 	bl	8001c6c <HAL_PWREx_ControlVoltageScaling>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000898:	f000 f90e 	bl	8000ab8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800089c:	2302      	movs	r3, #2
 800089e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008a4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008a6:	2340      	movs	r3, #64	; 0x40
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008aa:	2302      	movs	r3, #2
 80008ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008ae:	2302      	movs	r3, #2
 80008b0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008b2:	2301      	movs	r3, #1
 80008b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80008b6:	230a      	movs	r3, #10
 80008b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008ba:	2307      	movs	r3, #7
 80008bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008be:	2302      	movs	r3, #2
 80008c0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008c2:	2302      	movs	r3, #2
 80008c4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	4618      	mov	r0, r3
 80008cc:	f001 fa24 	bl	8001d18 <HAL_RCC_OscConfig>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <SystemClock_Config+0x72>
  {
    Error_Handler();
 80008d6:	f000 f8ef 	bl	8000ab8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008da:	230f      	movs	r3, #15
 80008dc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008de:	2303      	movs	r3, #3
 80008e0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e2:	2300      	movs	r3, #0
 80008e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ea:	2300      	movs	r3, #0
 80008ec:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008ee:	463b      	mov	r3, r7
 80008f0:	2104      	movs	r1, #4
 80008f2:	4618      	mov	r0, r3
 80008f4:	f001 fe24 	bl	8002540 <HAL_RCC_ClockConfig>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008fe:	f000 f8db 	bl	8000ab8 <Error_Handler>
  }
}
 8000902:	bf00      	nop
 8000904:	3758      	adds	r7, #88	; 0x58
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
	...

0800090c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000910:	4b1b      	ldr	r3, [pc, #108]	; (8000980 <MX_I2C1_Init+0x74>)
 8000912:	4a1c      	ldr	r2, [pc, #112]	; (8000984 <MX_I2C1_Init+0x78>)
 8000914:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000916:	4b1a      	ldr	r3, [pc, #104]	; (8000980 <MX_I2C1_Init+0x74>)
 8000918:	4a1b      	ldr	r2, [pc, #108]	; (8000988 <MX_I2C1_Init+0x7c>)
 800091a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800091c:	4b18      	ldr	r3, [pc, #96]	; (8000980 <MX_I2C1_Init+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000922:	4b17      	ldr	r3, [pc, #92]	; (8000980 <MX_I2C1_Init+0x74>)
 8000924:	2201      	movs	r2, #1
 8000926:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000928:	4b15      	ldr	r3, [pc, #84]	; (8000980 <MX_I2C1_Init+0x74>)
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800092e:	4b14      	ldr	r3, [pc, #80]	; (8000980 <MX_I2C1_Init+0x74>)
 8000930:	2200      	movs	r2, #0
 8000932:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <MX_I2C1_Init+0x74>)
 8000936:	2200      	movs	r2, #0
 8000938:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <MX_I2C1_Init+0x74>)
 800093c:	2200      	movs	r2, #0
 800093e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000940:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <MX_I2C1_Init+0x74>)
 8000942:	2200      	movs	r2, #0
 8000944:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000946:	480e      	ldr	r0, [pc, #56]	; (8000980 <MX_I2C1_Init+0x74>)
 8000948:	f000 fd68 	bl	800141c <HAL_I2C_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000952:	f000 f8b1 	bl	8000ab8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000956:	2100      	movs	r1, #0
 8000958:	4809      	ldr	r0, [pc, #36]	; (8000980 <MX_I2C1_Init+0x74>)
 800095a:	f001 f8e1 	bl	8001b20 <HAL_I2CEx_ConfigAnalogFilter>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000964:	f000 f8a8 	bl	8000ab8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000968:	2100      	movs	r1, #0
 800096a:	4805      	ldr	r0, [pc, #20]	; (8000980 <MX_I2C1_Init+0x74>)
 800096c:	f001 f923 	bl	8001bb6 <HAL_I2CEx_ConfigDigitalFilter>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000976:	f000 f89f 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000090 	.word	0x20000090
 8000984:	40005400 	.word	0x40005400
 8000988:	10909cec 	.word	0x10909cec

0800098c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000990:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <MX_USART2_UART_Init+0x58>)
 8000992:	4a15      	ldr	r2, [pc, #84]	; (80009e8 <MX_USART2_UART_Init+0x5c>)
 8000994:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000996:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <MX_USART2_UART_Init+0x58>)
 8000998:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800099c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800099e:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <MX_USART2_UART_Init+0x58>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009a4:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <MX_USART2_UART_Init+0x58>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <MX_USART2_UART_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <MX_USART2_UART_Init+0x58>)
 80009b2:	220c      	movs	r2, #12
 80009b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <MX_USART2_UART_Init+0x58>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009bc:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_USART2_UART_Init+0x58>)
 80009be:	2200      	movs	r2, #0
 80009c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009c2:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <MX_USART2_UART_Init+0x58>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <MX_USART2_UART_Init+0x58>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <MX_USART2_UART_Init+0x58>)
 80009d0:	f002 fb38 	bl	8003044 <HAL_UART_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009da:	f000 f86d 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	200000e4 	.word	0x200000e4
 80009e8:	40004400 	.word	0x40004400

080009ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	; 0x28
 80009f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]
 8000a00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a02:	4b2b      	ldr	r3, [pc, #172]	; (8000ab0 <MX_GPIO_Init+0xc4>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a06:	4a2a      	ldr	r2, [pc, #168]	; (8000ab0 <MX_GPIO_Init+0xc4>)
 8000a08:	f043 0304 	orr.w	r3, r3, #4
 8000a0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0e:	4b28      	ldr	r3, [pc, #160]	; (8000ab0 <MX_GPIO_Init+0xc4>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a12:	f003 0304 	and.w	r3, r3, #4
 8000a16:	613b      	str	r3, [r7, #16]
 8000a18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1a:	4b25      	ldr	r3, [pc, #148]	; (8000ab0 <MX_GPIO_Init+0xc4>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1e:	4a24      	ldr	r2, [pc, #144]	; (8000ab0 <MX_GPIO_Init+0xc4>)
 8000a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a26:	4b22      	ldr	r3, [pc, #136]	; (8000ab0 <MX_GPIO_Init+0xc4>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a32:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <MX_GPIO_Init+0xc4>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a36:	4a1e      	ldr	r2, [pc, #120]	; (8000ab0 <MX_GPIO_Init+0xc4>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a3e:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <MX_GPIO_Init+0xc4>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4a:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <MX_GPIO_Init+0xc4>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4e:	4a18      	ldr	r2, [pc, #96]	; (8000ab0 <MX_GPIO_Init+0xc4>)
 8000a50:	f043 0302 	orr.w	r3, r3, #2
 8000a54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a56:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <MX_GPIO_Init+0xc4>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5a:	f003 0302 	and.w	r3, r3, #2
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2120      	movs	r1, #32
 8000a66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6a:	f000 fca5 	bl	80013b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a74:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	480b      	ldr	r0, [pc, #44]	; (8000ab4 <MX_GPIO_Init+0xc8>)
 8000a86:	f000 fb1d 	bl	80010c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000a8a:	2320      	movs	r3, #32
 8000a8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	2300      	movs	r3, #0
 8000a98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa4:	f000 fb0e 	bl	80010c4 <HAL_GPIO_Init>

}
 8000aa8:	bf00      	nop
 8000aaa:	3728      	adds	r7, #40	; 0x28
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	48000800 	.word	0x48000800

08000ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000abc:	b672      	cpsid	i
}
 8000abe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <Error_Handler+0x8>
	...

08000ac4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aca:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <HAL_MspInit+0x44>)
 8000acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ace:	4a0e      	ldr	r2, [pc, #56]	; (8000b08 <HAL_MspInit+0x44>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ad6:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <HAL_MspInit+0x44>)
 8000ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <HAL_MspInit+0x44>)
 8000ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ae6:	4a08      	ldr	r2, [pc, #32]	; (8000b08 <HAL_MspInit+0x44>)
 8000ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aec:	6593      	str	r3, [r2, #88]	; 0x58
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <HAL_MspInit+0x44>)
 8000af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	40021000 	.word	0x40021000

08000b0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b0a4      	sub	sp, #144	; 0x90
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	2268      	movs	r2, #104	; 0x68
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f002 ff37 	bl	80039a0 <memset>
  if(hi2c->Instance==I2C1)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a21      	ldr	r2, [pc, #132]	; (8000bbc <HAL_I2C_MspInit+0xb0>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d13a      	bne.n	8000bb2 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b3c:	2340      	movs	r3, #64	; 0x40
 8000b3e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b40:	2300      	movs	r3, #0
 8000b42:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f001 ff1d 	bl	8002988 <HAL_RCCEx_PeriphCLKConfig>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000b54:	f7ff ffb0 	bl	8000ab8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b58:	4b19      	ldr	r3, [pc, #100]	; (8000bc0 <HAL_I2C_MspInit+0xb4>)
 8000b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5c:	4a18      	ldr	r2, [pc, #96]	; (8000bc0 <HAL_I2C_MspInit+0xb4>)
 8000b5e:	f043 0302 	orr.w	r3, r3, #2
 8000b62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b64:	4b16      	ldr	r3, [pc, #88]	; (8000bc0 <HAL_I2C_MspInit+0xb4>)
 8000b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b68:	f003 0302 	and.w	r3, r3, #2
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b70:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b74:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b76:	2312      	movs	r3, #18
 8000b78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b82:	2303      	movs	r3, #3
 8000b84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b88:	2304      	movs	r3, #4
 8000b8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000b92:	4619      	mov	r1, r3
 8000b94:	480b      	ldr	r0, [pc, #44]	; (8000bc4 <HAL_I2C_MspInit+0xb8>)
 8000b96:	f000 fa95 	bl	80010c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <HAL_I2C_MspInit+0xb4>)
 8000b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9e:	4a08      	ldr	r2, [pc, #32]	; (8000bc0 <HAL_I2C_MspInit+0xb4>)
 8000ba0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ba4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_I2C_MspInit+0xb4>)
 8000ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000baa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bb2:	bf00      	nop
 8000bb4:	3790      	adds	r7, #144	; 0x90
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40005400 	.word	0x40005400
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	48000400 	.word	0x48000400

08000bc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b0a4      	sub	sp, #144	; 0x90
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	2268      	movs	r2, #104	; 0x68
 8000be6:	2100      	movs	r1, #0
 8000be8:	4618      	mov	r0, r3
 8000bea:	f002 fed9 	bl	80039a0 <memset>
  if(huart->Instance==USART2)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a21      	ldr	r2, [pc, #132]	; (8000c78 <HAL_UART_MspInit+0xb0>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d13a      	bne.n	8000c6e <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	4618      	mov	r0, r3
 8000c06:	f001 febf 	bl	8002988 <HAL_RCCEx_PeriphCLKConfig>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c10:	f7ff ff52 	bl	8000ab8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c14:	4b19      	ldr	r3, [pc, #100]	; (8000c7c <HAL_UART_MspInit+0xb4>)
 8000c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c18:	4a18      	ldr	r2, [pc, #96]	; (8000c7c <HAL_UART_MspInit+0xb4>)
 8000c1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c1e:	6593      	str	r3, [r2, #88]	; 0x58
 8000c20:	4b16      	ldr	r3, [pc, #88]	; (8000c7c <HAL_UART_MspInit+0xb4>)
 8000c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2c:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <HAL_UART_MspInit+0xb4>)
 8000c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c30:	4a12      	ldr	r2, [pc, #72]	; (8000c7c <HAL_UART_MspInit+0xb4>)
 8000c32:	f043 0301 	orr.w	r3, r3, #1
 8000c36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c38:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <HAL_UART_MspInit+0xb4>)
 8000c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3c:	f003 0301 	and.w	r3, r3, #1
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c44:	230c      	movs	r3, #12
 8000c46:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c54:	2303      	movs	r3, #3
 8000c56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c5a:	2307      	movs	r3, #7
 8000c5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c60:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000c64:	4619      	mov	r1, r3
 8000c66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c6a:	f000 fa2b 	bl	80010c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c6e:	bf00      	nop
 8000c70:	3790      	adds	r7, #144	; 0x90
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40004400 	.word	0x40004400
 8000c7c:	40021000 	.word	0x40021000

08000c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <NMI_Handler+0x4>

08000c86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8a:	e7fe      	b.n	8000c8a <HardFault_Handler+0x4>

08000c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <MemManage_Handler+0x4>

08000c92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <BusFault_Handler+0x4>

08000c98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <UsageFault_Handler+0x4>

08000c9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ccc:	f000 f8d0 	bl	8000e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cdc:	4a14      	ldr	r2, [pc, #80]	; (8000d30 <_sbrk+0x5c>)
 8000cde:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <_sbrk+0x60>)
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce8:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <_sbrk+0x64>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d102      	bne.n	8000cf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf0:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <_sbrk+0x64>)
 8000cf2:	4a12      	ldr	r2, [pc, #72]	; (8000d3c <_sbrk+0x68>)
 8000cf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cf6:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <_sbrk+0x64>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d207      	bcs.n	8000d14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d04:	f002 fe22 	bl	800394c <__errno>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	220c      	movs	r2, #12
 8000d0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d12:	e009      	b.n	8000d28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <_sbrk+0x64>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d1a:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <_sbrk+0x64>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	4a05      	ldr	r2, [pc, #20]	; (8000d38 <_sbrk+0x64>)
 8000d24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d26:	68fb      	ldr	r3, [r7, #12]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3718      	adds	r7, #24
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20028000 	.word	0x20028000
 8000d34:	00000400 	.word	0x00000400
 8000d38:	20000168 	.word	0x20000168
 8000d3c:	20000180 	.word	0x20000180

08000d40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <SystemInit+0x20>)
 8000d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d4a:	4a05      	ldr	r2, [pc, #20]	; (8000d60 <SystemInit+0x20>)
 8000d4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d9c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d68:	f7ff ffea 	bl	8000d40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d6c:	480c      	ldr	r0, [pc, #48]	; (8000da0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d6e:	490d      	ldr	r1, [pc, #52]	; (8000da4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d70:	4a0d      	ldr	r2, [pc, #52]	; (8000da8 <LoopForever+0xe>)
  movs r3, #0
 8000d72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d74:	e002      	b.n	8000d7c <LoopCopyDataInit>

08000d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7a:	3304      	adds	r3, #4

08000d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d80:	d3f9      	bcc.n	8000d76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d82:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d84:	4c0a      	ldr	r4, [pc, #40]	; (8000db0 <LoopForever+0x16>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d88:	e001      	b.n	8000d8e <LoopFillZerobss>

08000d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d8c:	3204      	adds	r2, #4

08000d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d90:	d3fb      	bcc.n	8000d8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d92:	f002 fde1 	bl	8003958 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d96:	f7ff fd3d 	bl	8000814 <main>

08000d9a <LoopForever>:

LoopForever:
    b LoopForever
 8000d9a:	e7fe      	b.n	8000d9a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d9c:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8000da0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000da8:	08004368 	.word	0x08004368
  ldr r2, =_sbss
 8000dac:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000db0:	20000180 	.word	0x20000180

08000db4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000db4:	e7fe      	b.n	8000db4 <ADC1_IRQHandler>
	...

08000db8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <HAL_Init+0x3c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a0b      	ldr	r2, [pc, #44]	; (8000df4 <HAL_Init+0x3c>)
 8000dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dcc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dce:	2003      	movs	r0, #3
 8000dd0:	f000 f944 	bl	800105c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	f000 f80f 	bl	8000df8 <HAL_InitTick>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d002      	beq.n	8000de6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000de0:	2301      	movs	r3, #1
 8000de2:	71fb      	strb	r3, [r7, #7]
 8000de4:	e001      	b.n	8000dea <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000de6:	f7ff fe6d 	bl	8000ac4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dea:	79fb      	ldrb	r3, [r7, #7]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40022000 	.word	0x40022000

08000df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e00:	2300      	movs	r3, #0
 8000e02:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e04:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <HAL_InitTick+0x6c>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d023      	beq.n	8000e54 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e0c:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <HAL_InitTick+0x70>)
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <HAL_InitTick+0x6c>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	4619      	mov	r1, r3
 8000e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 f941 	bl	80010aa <HAL_SYSTICK_Config>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d10f      	bne.n	8000e4e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2b0f      	cmp	r3, #15
 8000e32:	d809      	bhi.n	8000e48 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e34:	2200      	movs	r2, #0
 8000e36:	6879      	ldr	r1, [r7, #4]
 8000e38:	f04f 30ff 	mov.w	r0, #4294967295
 8000e3c:	f000 f919 	bl	8001072 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e40:	4a0a      	ldr	r2, [pc, #40]	; (8000e6c <HAL_InitTick+0x74>)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6013      	str	r3, [r2, #0]
 8000e46:	e007      	b.n	8000e58 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	73fb      	strb	r3, [r7, #15]
 8000e4c:	e004      	b.n	8000e58 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	73fb      	strb	r3, [r7, #15]
 8000e52:	e001      	b.n	8000e58 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e54:	2301      	movs	r3, #1
 8000e56:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000008 	.word	0x20000008
 8000e68:	20000000 	.word	0x20000000
 8000e6c:	20000004 	.word	0x20000004

08000e70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_IncTick+0x20>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <HAL_IncTick+0x24>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4413      	add	r3, r2
 8000e80:	4a04      	ldr	r2, [pc, #16]	; (8000e94 <HAL_IncTick+0x24>)
 8000e82:	6013      	str	r3, [r2, #0]
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	20000008 	.word	0x20000008
 8000e94:	2000016c 	.word	0x2000016c

08000e98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e9c:	4b03      	ldr	r3, [pc, #12]	; (8000eac <HAL_GetTick+0x14>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	2000016c 	.word	0x2000016c

08000eb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eb8:	f7ff ffee 	bl	8000e98 <HAL_GetTick>
 8000ebc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ec8:	d005      	beq.n	8000ed6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000eca:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <HAL_Delay+0x44>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ed6:	bf00      	nop
 8000ed8:	f7ff ffde 	bl	8000e98 <HAL_GetTick>
 8000edc:	4602      	mov	r2, r0
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d8f7      	bhi.n	8000ed8 <HAL_Delay+0x28>
  {
  }
}
 8000ee8:	bf00      	nop
 8000eea:	bf00      	nop
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000008 	.word	0x20000008

08000ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <__NVIC_SetPriorityGrouping+0x44>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f14:	4013      	ands	r3, r2
 8000f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f2a:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <__NVIC_SetPriorityGrouping+0x44>)
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	60d3      	str	r3, [r2, #12]
}
 8000f30:	bf00      	nop
 8000f32:	3714      	adds	r7, #20
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f44:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <__NVIC_GetPriorityGrouping+0x18>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	0a1b      	lsrs	r3, r3, #8
 8000f4a:	f003 0307 	and.w	r3, r3, #7
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	6039      	str	r1, [r7, #0]
 8000f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	db0a      	blt.n	8000f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	b2da      	uxtb	r2, r3
 8000f74:	490c      	ldr	r1, [pc, #48]	; (8000fa8 <__NVIC_SetPriority+0x4c>)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	0112      	lsls	r2, r2, #4
 8000f7c:	b2d2      	uxtb	r2, r2
 8000f7e:	440b      	add	r3, r1
 8000f80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f84:	e00a      	b.n	8000f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	b2da      	uxtb	r2, r3
 8000f8a:	4908      	ldr	r1, [pc, #32]	; (8000fac <__NVIC_SetPriority+0x50>)
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	f003 030f 	and.w	r3, r3, #15
 8000f92:	3b04      	subs	r3, #4
 8000f94:	0112      	lsls	r2, r2, #4
 8000f96:	b2d2      	uxtb	r2, r2
 8000f98:	440b      	add	r3, r1
 8000f9a:	761a      	strb	r2, [r3, #24]
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000e100 	.word	0xe000e100
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b089      	sub	sp, #36	; 0x24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	f1c3 0307 	rsb	r3, r3, #7
 8000fca:	2b04      	cmp	r3, #4
 8000fcc:	bf28      	it	cs
 8000fce:	2304      	movcs	r3, #4
 8000fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	2b06      	cmp	r3, #6
 8000fd8:	d902      	bls.n	8000fe0 <NVIC_EncodePriority+0x30>
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3b03      	subs	r3, #3
 8000fde:	e000      	b.n	8000fe2 <NVIC_EncodePriority+0x32>
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43da      	mvns	r2, r3
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	401a      	ands	r2, r3
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8001002:	43d9      	mvns	r1, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001008:	4313      	orrs	r3, r2
         );
}
 800100a:	4618      	mov	r0, r3
 800100c:	3724      	adds	r7, #36	; 0x24
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
	...

08001018 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3b01      	subs	r3, #1
 8001024:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001028:	d301      	bcc.n	800102e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800102a:	2301      	movs	r3, #1
 800102c:	e00f      	b.n	800104e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800102e:	4a0a      	ldr	r2, [pc, #40]	; (8001058 <SysTick_Config+0x40>)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3b01      	subs	r3, #1
 8001034:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001036:	210f      	movs	r1, #15
 8001038:	f04f 30ff 	mov.w	r0, #4294967295
 800103c:	f7ff ff8e 	bl	8000f5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <SysTick_Config+0x40>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001046:	4b04      	ldr	r3, [pc, #16]	; (8001058 <SysTick_Config+0x40>)
 8001048:	2207      	movs	r2, #7
 800104a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	e000e010 	.word	0xe000e010

0800105c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff ff47 	bl	8000ef8 <__NVIC_SetPriorityGrouping>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b086      	sub	sp, #24
 8001076:	af00      	add	r7, sp, #0
 8001078:	4603      	mov	r3, r0
 800107a:	60b9      	str	r1, [r7, #8]
 800107c:	607a      	str	r2, [r7, #4]
 800107e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001084:	f7ff ff5c 	bl	8000f40 <__NVIC_GetPriorityGrouping>
 8001088:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	68b9      	ldr	r1, [r7, #8]
 800108e:	6978      	ldr	r0, [r7, #20]
 8001090:	f7ff ff8e 	bl	8000fb0 <NVIC_EncodePriority>
 8001094:	4602      	mov	r2, r0
 8001096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff5d 	bl	8000f5c <__NVIC_SetPriority>
}
 80010a2:	bf00      	nop
 80010a4:	3718      	adds	r7, #24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff ffb0 	bl	8001018 <SysTick_Config>
 80010b8:	4603      	mov	r3, r0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b087      	sub	sp, #28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010ce:	2300      	movs	r3, #0
 80010d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010d2:	e154      	b.n	800137e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	2101      	movs	r1, #1
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	fa01 f303 	lsl.w	r3, r1, r3
 80010e0:	4013      	ands	r3, r2
 80010e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f000 8146 	beq.w	8001378 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f003 0303 	and.w	r3, r3, #3
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d005      	beq.n	8001104 <HAL_GPIO_Init+0x40>
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 0303 	and.w	r3, r3, #3
 8001100:	2b02      	cmp	r3, #2
 8001102:	d130      	bne.n	8001166 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	2203      	movs	r2, #3
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	4013      	ands	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	68da      	ldr	r2, [r3, #12]
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	4313      	orrs	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800113a:	2201      	movs	r2, #1
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43db      	mvns	r3, r3
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	4013      	ands	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	091b      	lsrs	r3, r3, #4
 8001150:	f003 0201 	and.w	r2, r3, #1
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	4313      	orrs	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f003 0303 	and.w	r3, r3, #3
 800116e:	2b03      	cmp	r3, #3
 8001170:	d017      	beq.n	80011a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	2203      	movs	r2, #3
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	4013      	ands	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	689a      	ldr	r2, [r3, #8]
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4313      	orrs	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f003 0303 	and.w	r3, r3, #3
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d123      	bne.n	80011f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	08da      	lsrs	r2, r3, #3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	3208      	adds	r2, #8
 80011b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	220f      	movs	r2, #15
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4013      	ands	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	691a      	ldr	r2, [r3, #16]
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	f003 0307 	and.w	r3, r3, #7
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	08da      	lsrs	r2, r3, #3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3208      	adds	r2, #8
 80011f0:	6939      	ldr	r1, [r7, #16]
 80011f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	2203      	movs	r2, #3
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43db      	mvns	r3, r3
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	4013      	ands	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f003 0203 	and.w	r2, r3, #3
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	4313      	orrs	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001232:	2b00      	cmp	r3, #0
 8001234:	f000 80a0 	beq.w	8001378 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001238:	4b58      	ldr	r3, [pc, #352]	; (800139c <HAL_GPIO_Init+0x2d8>)
 800123a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800123c:	4a57      	ldr	r2, [pc, #348]	; (800139c <HAL_GPIO_Init+0x2d8>)
 800123e:	f043 0301 	orr.w	r3, r3, #1
 8001242:	6613      	str	r3, [r2, #96]	; 0x60
 8001244:	4b55      	ldr	r3, [pc, #340]	; (800139c <HAL_GPIO_Init+0x2d8>)
 8001246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001250:	4a53      	ldr	r2, [pc, #332]	; (80013a0 <HAL_GPIO_Init+0x2dc>)
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	089b      	lsrs	r3, r3, #2
 8001256:	3302      	adds	r3, #2
 8001258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	f003 0303 	and.w	r3, r3, #3
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	220f      	movs	r2, #15
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4013      	ands	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800127a:	d019      	beq.n	80012b0 <HAL_GPIO_Init+0x1ec>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4a49      	ldr	r2, [pc, #292]	; (80013a4 <HAL_GPIO_Init+0x2e0>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d013      	beq.n	80012ac <HAL_GPIO_Init+0x1e8>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4a48      	ldr	r2, [pc, #288]	; (80013a8 <HAL_GPIO_Init+0x2e4>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d00d      	beq.n	80012a8 <HAL_GPIO_Init+0x1e4>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4a47      	ldr	r2, [pc, #284]	; (80013ac <HAL_GPIO_Init+0x2e8>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d007      	beq.n	80012a4 <HAL_GPIO_Init+0x1e0>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4a46      	ldr	r2, [pc, #280]	; (80013b0 <HAL_GPIO_Init+0x2ec>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d101      	bne.n	80012a0 <HAL_GPIO_Init+0x1dc>
 800129c:	2304      	movs	r3, #4
 800129e:	e008      	b.n	80012b2 <HAL_GPIO_Init+0x1ee>
 80012a0:	2307      	movs	r3, #7
 80012a2:	e006      	b.n	80012b2 <HAL_GPIO_Init+0x1ee>
 80012a4:	2303      	movs	r3, #3
 80012a6:	e004      	b.n	80012b2 <HAL_GPIO_Init+0x1ee>
 80012a8:	2302      	movs	r3, #2
 80012aa:	e002      	b.n	80012b2 <HAL_GPIO_Init+0x1ee>
 80012ac:	2301      	movs	r3, #1
 80012ae:	e000      	b.n	80012b2 <HAL_GPIO_Init+0x1ee>
 80012b0:	2300      	movs	r3, #0
 80012b2:	697a      	ldr	r2, [r7, #20]
 80012b4:	f002 0203 	and.w	r2, r2, #3
 80012b8:	0092      	lsls	r2, r2, #2
 80012ba:	4093      	lsls	r3, r2
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	4313      	orrs	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012c2:	4937      	ldr	r1, [pc, #220]	; (80013a0 <HAL_GPIO_Init+0x2dc>)
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	089b      	lsrs	r3, r3, #2
 80012c8:	3302      	adds	r3, #2
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012d0:	4b38      	ldr	r3, [pc, #224]	; (80013b4 <HAL_GPIO_Init+0x2f0>)
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	43db      	mvns	r3, r3
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4013      	ands	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012f4:	4a2f      	ldr	r2, [pc, #188]	; (80013b4 <HAL_GPIO_Init+0x2f0>)
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012fa:	4b2e      	ldr	r3, [pc, #184]	; (80013b4 <HAL_GPIO_Init+0x2f0>)
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	43db      	mvns	r3, r3
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	4013      	ands	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4313      	orrs	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800131e:	4a25      	ldr	r2, [pc, #148]	; (80013b4 <HAL_GPIO_Init+0x2f0>)
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001324:	4b23      	ldr	r3, [pc, #140]	; (80013b4 <HAL_GPIO_Init+0x2f0>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	43db      	mvns	r3, r3
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4013      	ands	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	4313      	orrs	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001348:	4a1a      	ldr	r2, [pc, #104]	; (80013b4 <HAL_GPIO_Init+0x2f0>)
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800134e:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <HAL_GPIO_Init+0x2f0>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	43db      	mvns	r3, r3
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	4013      	ands	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4313      	orrs	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001372:	4a10      	ldr	r2, [pc, #64]	; (80013b4 <HAL_GPIO_Init+0x2f0>)
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	3301      	adds	r3, #1
 800137c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	fa22 f303 	lsr.w	r3, r2, r3
 8001388:	2b00      	cmp	r3, #0
 800138a:	f47f aea3 	bne.w	80010d4 <HAL_GPIO_Init+0x10>
  }
}
 800138e:	bf00      	nop
 8001390:	bf00      	nop
 8001392:	371c      	adds	r7, #28
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	40021000 	.word	0x40021000
 80013a0:	40010000 	.word	0x40010000
 80013a4:	48000400 	.word	0x48000400
 80013a8:	48000800 	.word	0x48000800
 80013ac:	48000c00 	.word	0x48000c00
 80013b0:	48001000 	.word	0x48001000
 80013b4:	40010400 	.word	0x40010400

080013b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	460b      	mov	r3, r1
 80013c2:	807b      	strh	r3, [r7, #2]
 80013c4:	4613      	mov	r3, r2
 80013c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013c8:	787b      	ldrb	r3, [r7, #1]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013ce:	887a      	ldrh	r2, [r7, #2]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013d4:	e002      	b.n	80013dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013d6:	887a      	ldrh	r2, [r7, #2]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	460b      	mov	r3, r1
 80013f2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	695b      	ldr	r3, [r3, #20]
 80013f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013fa:	887a      	ldrh	r2, [r7, #2]
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	4013      	ands	r3, r2
 8001400:	041a      	lsls	r2, r3, #16
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	43d9      	mvns	r1, r3
 8001406:	887b      	ldrh	r3, [r7, #2]
 8001408:	400b      	ands	r3, r1
 800140a:	431a      	orrs	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	619a      	str	r2, [r3, #24]
}
 8001410:	bf00      	nop
 8001412:	3714      	adds	r7, #20
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e081      	b.n	8001532 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b00      	cmp	r3, #0
 8001438:	d106      	bne.n	8001448 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff fb62 	bl	8000b0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2224      	movs	r2, #36	; 0x24
 800144c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f022 0201 	bic.w	r2, r2, #1
 800145e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800146c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	689a      	ldr	r2, [r3, #8]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800147c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d107      	bne.n	8001496 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	689a      	ldr	r2, [r3, #8]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	e006      	b.n	80014a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80014a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d104      	bne.n	80014b6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	6812      	ldr	r2, [r2, #0]
 80014c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	68da      	ldr	r2, [r3, #12]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	691a      	ldr	r2, [r3, #16]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	430a      	orrs	r2, r1
 80014f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	69d9      	ldr	r1, [r3, #28]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a1a      	ldr	r2, [r3, #32]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	430a      	orrs	r2, r1
 8001502:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f042 0201 	orr.w	r2, r2, #1
 8001512:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2220      	movs	r2, #32
 800151e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b088      	sub	sp, #32
 8001540:	af02      	add	r7, sp, #8
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	607a      	str	r2, [r7, #4]
 8001546:	461a      	mov	r2, r3
 8001548:	460b      	mov	r3, r1
 800154a:	817b      	strh	r3, [r7, #10]
 800154c:	4613      	mov	r3, r2
 800154e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001556:	b2db      	uxtb	r3, r3
 8001558:	2b20      	cmp	r3, #32
 800155a:	f040 80da 	bne.w	8001712 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001564:	2b01      	cmp	r3, #1
 8001566:	d101      	bne.n	800156c <HAL_I2C_Master_Transmit+0x30>
 8001568:	2302      	movs	r3, #2
 800156a:	e0d3      	b.n	8001714 <HAL_I2C_Master_Transmit+0x1d8>
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001574:	f7ff fc90 	bl	8000e98 <HAL_GetTick>
 8001578:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	2319      	movs	r3, #25
 8001580:	2201      	movs	r2, #1
 8001582:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f000 f8f0 	bl	800176c <I2C_WaitOnFlagUntilTimeout>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e0be      	b.n	8001714 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2221      	movs	r2, #33	; 0x21
 800159a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2210      	movs	r2, #16
 80015a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2200      	movs	r2, #0
 80015aa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	893a      	ldrh	r2, [r7, #8]
 80015b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2200      	movs	r2, #0
 80015bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	2bff      	cmp	r3, #255	; 0xff
 80015c6:	d90e      	bls.n	80015e6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	22ff      	movs	r2, #255	; 0xff
 80015cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	8979      	ldrh	r1, [r7, #10]
 80015d6:	4b51      	ldr	r3, [pc, #324]	; (800171c <HAL_I2C_Master_Transmit+0x1e0>)
 80015d8:	9300      	str	r3, [sp, #0]
 80015da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015de:	68f8      	ldr	r0, [r7, #12]
 80015e0:	f000 fa6c 	bl	8001abc <I2C_TransferConfig>
 80015e4:	e06c      	b.n	80016c0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	8979      	ldrh	r1, [r7, #10]
 80015f8:	4b48      	ldr	r3, [pc, #288]	; (800171c <HAL_I2C_Master_Transmit+0x1e0>)
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001600:	68f8      	ldr	r0, [r7, #12]
 8001602:	f000 fa5b 	bl	8001abc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001606:	e05b      	b.n	80016c0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001608:	697a      	ldr	r2, [r7, #20]
 800160a:	6a39      	ldr	r1, [r7, #32]
 800160c:	68f8      	ldr	r0, [r7, #12]
 800160e:	f000 f8ed 	bl	80017ec <I2C_WaitOnTXISFlagUntilTimeout>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e07b      	b.n	8001714 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001620:	781a      	ldrb	r2, [r3, #0]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162c:	1c5a      	adds	r2, r3, #1
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001636:	b29b      	uxth	r3, r3
 8001638:	3b01      	subs	r3, #1
 800163a:	b29a      	uxth	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001644:	3b01      	subs	r3, #1
 8001646:	b29a      	uxth	r2, r3
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001650:	b29b      	uxth	r3, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	d034      	beq.n	80016c0 <HAL_I2C_Master_Transmit+0x184>
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800165a:	2b00      	cmp	r3, #0
 800165c:	d130      	bne.n	80016c0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	9300      	str	r3, [sp, #0]
 8001662:	6a3b      	ldr	r3, [r7, #32]
 8001664:	2200      	movs	r2, #0
 8001666:	2180      	movs	r1, #128	; 0x80
 8001668:	68f8      	ldr	r0, [r7, #12]
 800166a:	f000 f87f 	bl	800176c <I2C_WaitOnFlagUntilTimeout>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e04d      	b.n	8001714 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800167c:	b29b      	uxth	r3, r3
 800167e:	2bff      	cmp	r3, #255	; 0xff
 8001680:	d90e      	bls.n	80016a0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	22ff      	movs	r2, #255	; 0xff
 8001686:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800168c:	b2da      	uxtb	r2, r3
 800168e:	8979      	ldrh	r1, [r7, #10]
 8001690:	2300      	movs	r3, #0
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001698:	68f8      	ldr	r0, [r7, #12]
 800169a:	f000 fa0f 	bl	8001abc <I2C_TransferConfig>
 800169e:	e00f      	b.n	80016c0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	8979      	ldrh	r1, [r7, #10]
 80016b2:	2300      	movs	r3, #0
 80016b4:	9300      	str	r3, [sp, #0]
 80016b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016ba:	68f8      	ldr	r0, [r7, #12]
 80016bc:	f000 f9fe 	bl	8001abc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d19e      	bne.n	8001608 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016ca:	697a      	ldr	r2, [r7, #20]
 80016cc:	6a39      	ldr	r1, [r7, #32]
 80016ce:	68f8      	ldr	r0, [r7, #12]
 80016d0:	f000 f8cc 	bl	800186c <I2C_WaitOnSTOPFlagUntilTimeout>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e01a      	b.n	8001714 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2220      	movs	r2, #32
 80016e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6859      	ldr	r1, [r3, #4]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <HAL_I2C_Master_Transmit+0x1e4>)
 80016f2:	400b      	ands	r3, r1
 80016f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2220      	movs	r2, #32
 80016fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800170e:	2300      	movs	r3, #0
 8001710:	e000      	b.n	8001714 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001712:	2302      	movs	r3, #2
  }
}
 8001714:	4618      	mov	r0, r3
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	80002000 	.word	0x80002000
 8001720:	fe00e800 	.word	0xfe00e800

08001724 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b02      	cmp	r3, #2
 8001738:	d103      	bne.n	8001742 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2200      	movs	r2, #0
 8001740:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	2b01      	cmp	r3, #1
 800174e:	d007      	beq.n	8001760 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	699a      	ldr	r2, [r3, #24]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f042 0201 	orr.w	r2, r2, #1
 800175e:	619a      	str	r2, [r3, #24]
  }
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	603b      	str	r3, [r7, #0]
 8001778:	4613      	mov	r3, r2
 800177a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800177c:	e022      	b.n	80017c4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001784:	d01e      	beq.n	80017c4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001786:	f7ff fb87 	bl	8000e98 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	429a      	cmp	r2, r3
 8001794:	d302      	bcc.n	800179c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d113      	bne.n	80017c4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a0:	f043 0220 	orr.w	r2, r3, #32
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2220      	movs	r2, #32
 80017ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2200      	movs	r2, #0
 80017b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e00f      	b.n	80017e4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	699a      	ldr	r2, [r3, #24]
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	4013      	ands	r3, r2
 80017ce:	68ba      	ldr	r2, [r7, #8]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	bf0c      	ite	eq
 80017d4:	2301      	moveq	r3, #1
 80017d6:	2300      	movne	r3, #0
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	461a      	mov	r2, r3
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d0cd      	beq.n	800177e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80017f8:	e02c      	b.n	8001854 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	68b9      	ldr	r1, [r7, #8]
 80017fe:	68f8      	ldr	r0, [r7, #12]
 8001800:	f000 f870 	bl	80018e4 <I2C_IsErrorOccurred>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e02a      	b.n	8001864 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001814:	d01e      	beq.n	8001854 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001816:	f7ff fb3f 	bl	8000e98 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	68ba      	ldr	r2, [r7, #8]
 8001822:	429a      	cmp	r2, r3
 8001824:	d302      	bcc.n	800182c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d113      	bne.n	8001854 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001830:	f043 0220 	orr.w	r2, r3, #32
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2220      	movs	r2, #32
 800183c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2200      	movs	r2, #0
 800184c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e007      	b.n	8001864 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b02      	cmp	r3, #2
 8001860:	d1cb      	bne.n	80017fa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001878:	e028      	b.n	80018cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	68b9      	ldr	r1, [r7, #8]
 800187e:	68f8      	ldr	r0, [r7, #12]
 8001880:	f000 f830 	bl	80018e4 <I2C_IsErrorOccurred>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e026      	b.n	80018dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800188e:	f7ff fb03 	bl	8000e98 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	68ba      	ldr	r2, [r7, #8]
 800189a:	429a      	cmp	r2, r3
 800189c:	d302      	bcc.n	80018a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d113      	bne.n	80018cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a8:	f043 0220 	orr.w	r2, r3, #32
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2220      	movs	r2, #32
 80018b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2200      	movs	r2, #0
 80018bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e007      	b.n	80018dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	f003 0320 	and.w	r3, r3, #32
 80018d6:	2b20      	cmp	r3, #32
 80018d8:	d1cf      	bne.n	800187a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08a      	sub	sp, #40	; 0x28
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018f0:	2300      	movs	r3, #0
 80018f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80018fe:	2300      	movs	r3, #0
 8001900:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	f003 0310 	and.w	r3, r3, #16
 800190c:	2b00      	cmp	r3, #0
 800190e:	d075      	beq.n	80019fc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2210      	movs	r2, #16
 8001916:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001918:	e056      	b.n	80019c8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001920:	d052      	beq.n	80019c8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001922:	f7ff fab9 	bl	8000e98 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	68ba      	ldr	r2, [r7, #8]
 800192e:	429a      	cmp	r2, r3
 8001930:	d302      	bcc.n	8001938 <I2C_IsErrorOccurred+0x54>
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d147      	bne.n	80019c8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001942:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800194a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	699b      	ldr	r3, [r3, #24]
 8001952:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001956:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800195a:	d12e      	bne.n	80019ba <I2C_IsErrorOccurred+0xd6>
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001962:	d02a      	beq.n	80019ba <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001964:	7cfb      	ldrb	r3, [r7, #19]
 8001966:	2b20      	cmp	r3, #32
 8001968:	d027      	beq.n	80019ba <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001978:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800197a:	f7ff fa8d 	bl	8000e98 <HAL_GetTick>
 800197e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001980:	e01b      	b.n	80019ba <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001982:	f7ff fa89 	bl	8000e98 <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b19      	cmp	r3, #25
 800198e:	d914      	bls.n	80019ba <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001994:	f043 0220 	orr.w	r2, r3, #32
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2220      	movs	r2, #32
 80019a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	f003 0320 	and.w	r3, r3, #32
 80019c4:	2b20      	cmp	r3, #32
 80019c6:	d1dc      	bne.n	8001982 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	f003 0320 	and.w	r3, r3, #32
 80019d2:	2b20      	cmp	r3, #32
 80019d4:	d003      	beq.n	80019de <I2C_IsErrorOccurred+0xfa>
 80019d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d09d      	beq.n	800191a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80019de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d103      	bne.n	80019ee <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2220      	movs	r2, #32
 80019ec:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80019ee:	6a3b      	ldr	r3, [r7, #32]
 80019f0:	f043 0304 	orr.w	r3, r3, #4
 80019f4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d00b      	beq.n	8001a26 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001a0e:	6a3b      	ldr	r3, [r7, #32]
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a1e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d00b      	beq.n	8001a48 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001a30:	6a3b      	ldr	r3, [r7, #32]
 8001a32:	f043 0308 	orr.w	r3, r3, #8
 8001a36:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a40:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d00b      	beq.n	8001a6a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001a52:	6a3b      	ldr	r3, [r7, #32]
 8001a54:	f043 0302 	orr.w	r3, r3, #2
 8001a58:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a62:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001a6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d01c      	beq.n	8001aac <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	f7ff fe56 	bl	8001724 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6859      	ldr	r1, [r3, #4]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	4b0d      	ldr	r3, [pc, #52]	; (8001ab8 <I2C_IsErrorOccurred+0x1d4>)
 8001a84:	400b      	ands	r3, r1
 8001a86:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a8c:	6a3b      	ldr	r3, [r7, #32]
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2220      	movs	r2, #32
 8001a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001aac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3728      	adds	r7, #40	; 0x28
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	fe00e800 	.word	0xfe00e800

08001abc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b087      	sub	sp, #28
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	607b      	str	r3, [r7, #4]
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	817b      	strh	r3, [r7, #10]
 8001aca:	4613      	mov	r3, r2
 8001acc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ace:	897b      	ldrh	r3, [r7, #10]
 8001ad0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001ad4:	7a7b      	ldrb	r3, [r7, #9]
 8001ad6:	041b      	lsls	r3, r3, #16
 8001ad8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001adc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ae2:	6a3b      	ldr	r3, [r7, #32]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001aea:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	685a      	ldr	r2, [r3, #4]
 8001af2:	6a3b      	ldr	r3, [r7, #32]
 8001af4:	0d5b      	lsrs	r3, r3, #21
 8001af6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001afa:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <I2C_TransferConfig+0x60>)
 8001afc:	430b      	orrs	r3, r1
 8001afe:	43db      	mvns	r3, r3
 8001b00:	ea02 0103 	and.w	r1, r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001b0e:	bf00      	nop
 8001b10:	371c      	adds	r7, #28
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	03ff63ff 	.word	0x03ff63ff

08001b20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b20      	cmp	r3, #32
 8001b34:	d138      	bne.n	8001ba8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d101      	bne.n	8001b44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001b40:	2302      	movs	r3, #2
 8001b42:	e032      	b.n	8001baa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2224      	movs	r2, #36	; 0x24
 8001b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 0201 	bic.w	r2, r2, #1
 8001b62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6819      	ldr	r1, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	430a      	orrs	r2, r1
 8001b82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f042 0201 	orr.w	r2, r2, #1
 8001b92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2220      	movs	r2, #32
 8001b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	e000      	b.n	8001baa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ba8:	2302      	movs	r3, #2
  }
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b085      	sub	sp, #20
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
 8001bbe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2b20      	cmp	r3, #32
 8001bca:	d139      	bne.n	8001c40 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d101      	bne.n	8001bda <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	e033      	b.n	8001c42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2224      	movs	r2, #36	; 0x24
 8001be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 0201 	bic.w	r2, r2, #1
 8001bf8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c08:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	021b      	lsls	r3, r3, #8
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	68fa      	ldr	r2, [r7, #12]
 8001c1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0201 	orr.w	r2, r2, #1
 8001c2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2220      	movs	r2, #32
 8001c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	e000      	b.n	8001c42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001c40:	2302      	movs	r3, #2
  }
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
	...

08001c50 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001c54:	4b04      	ldr	r3, [pc, #16]	; (8001c68 <HAL_PWREx_GetVoltageRange+0x18>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40007000 	.word	0x40007000

08001c6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c7a:	d130      	bne.n	8001cde <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c7c:	4b23      	ldr	r3, [pc, #140]	; (8001d0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c88:	d038      	beq.n	8001cfc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c8a:	4b20      	ldr	r3, [pc, #128]	; (8001d0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c92:	4a1e      	ldr	r2, [pc, #120]	; (8001d0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c98:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c9a:	4b1d      	ldr	r3, [pc, #116]	; (8001d10 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2232      	movs	r2, #50	; 0x32
 8001ca0:	fb02 f303 	mul.w	r3, r2, r3
 8001ca4:	4a1b      	ldr	r2, [pc, #108]	; (8001d14 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8001caa:	0c9b      	lsrs	r3, r3, #18
 8001cac:	3301      	adds	r3, #1
 8001cae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cb0:	e002      	b.n	8001cb8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cb8:	4b14      	ldr	r3, [pc, #80]	; (8001d0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cba:	695b      	ldr	r3, [r3, #20]
 8001cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cc4:	d102      	bne.n	8001ccc <HAL_PWREx_ControlVoltageScaling+0x60>
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1f2      	bne.n	8001cb2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ccc:	4b0f      	ldr	r3, [pc, #60]	; (8001d0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cd8:	d110      	bne.n	8001cfc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e00f      	b.n	8001cfe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cde:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ce6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cea:	d007      	beq.n	8001cfc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001cec:	4b07      	ldr	r3, [pc, #28]	; (8001d0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cf4:	4a05      	ldr	r2, [pc, #20]	; (8001d0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cf6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cfa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	40007000 	.word	0x40007000
 8001d10:	20000000 	.word	0x20000000
 8001d14:	431bde83 	.word	0x431bde83

08001d18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b088      	sub	sp, #32
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d102      	bne.n	8001d2c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	f000 bc02 	b.w	8002530 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d2c:	4b96      	ldr	r3, [pc, #600]	; (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f003 030c 	and.w	r3, r3, #12
 8001d34:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d36:	4b94      	ldr	r3, [pc, #592]	; (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0310 	and.w	r3, r3, #16
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f000 80e4 	beq.w	8001f16 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d007      	beq.n	8001d64 <HAL_RCC_OscConfig+0x4c>
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	2b0c      	cmp	r3, #12
 8001d58:	f040 808b 	bne.w	8001e72 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	f040 8087 	bne.w	8001e72 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d64:	4b88      	ldr	r3, [pc, #544]	; (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d005      	beq.n	8001d7c <HAL_RCC_OscConfig+0x64>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e3d9      	b.n	8002530 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a1a      	ldr	r2, [r3, #32]
 8001d80:	4b81      	ldr	r3, [pc, #516]	; (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0308 	and.w	r3, r3, #8
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d004      	beq.n	8001d96 <HAL_RCC_OscConfig+0x7e>
 8001d8c:	4b7e      	ldr	r3, [pc, #504]	; (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d94:	e005      	b.n	8001da2 <HAL_RCC_OscConfig+0x8a>
 8001d96:	4b7c      	ldr	r3, [pc, #496]	; (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001d98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d9c:	091b      	lsrs	r3, r3, #4
 8001d9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d223      	bcs.n	8001dee <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a1b      	ldr	r3, [r3, #32]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f000 fd8c 	bl	80028c8 <RCC_SetFlashLatencyFromMSIRange>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e3ba      	b.n	8002530 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dba:	4b73      	ldr	r3, [pc, #460]	; (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a72      	ldr	r2, [pc, #456]	; (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001dc0:	f043 0308 	orr.w	r3, r3, #8
 8001dc4:	6013      	str	r3, [r2, #0]
 8001dc6:	4b70      	ldr	r3, [pc, #448]	; (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a1b      	ldr	r3, [r3, #32]
 8001dd2:	496d      	ldr	r1, [pc, #436]	; (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dd8:	4b6b      	ldr	r3, [pc, #428]	; (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	69db      	ldr	r3, [r3, #28]
 8001de4:	021b      	lsls	r3, r3, #8
 8001de6:	4968      	ldr	r1, [pc, #416]	; (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	604b      	str	r3, [r1, #4]
 8001dec:	e025      	b.n	8001e3a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dee:	4b66      	ldr	r3, [pc, #408]	; (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a65      	ldr	r2, [pc, #404]	; (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001df4:	f043 0308 	orr.w	r3, r3, #8
 8001df8:	6013      	str	r3, [r2, #0]
 8001dfa:	4b63      	ldr	r3, [pc, #396]	; (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a1b      	ldr	r3, [r3, #32]
 8001e06:	4960      	ldr	r1, [pc, #384]	; (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e0c:	4b5e      	ldr	r3, [pc, #376]	; (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	69db      	ldr	r3, [r3, #28]
 8001e18:	021b      	lsls	r3, r3, #8
 8001e1a:	495b      	ldr	r1, [pc, #364]	; (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d109      	bne.n	8001e3a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a1b      	ldr	r3, [r3, #32]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f000 fd4c 	bl	80028c8 <RCC_SetFlashLatencyFromMSIRange>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e37a      	b.n	8002530 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e3a:	f000 fc81 	bl	8002740 <HAL_RCC_GetSysClockFreq>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	4b51      	ldr	r3, [pc, #324]	; (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	091b      	lsrs	r3, r3, #4
 8001e46:	f003 030f 	and.w	r3, r3, #15
 8001e4a:	4950      	ldr	r1, [pc, #320]	; (8001f8c <HAL_RCC_OscConfig+0x274>)
 8001e4c:	5ccb      	ldrb	r3, [r1, r3]
 8001e4e:	f003 031f 	and.w	r3, r3, #31
 8001e52:	fa22 f303 	lsr.w	r3, r2, r3
 8001e56:	4a4e      	ldr	r2, [pc, #312]	; (8001f90 <HAL_RCC_OscConfig+0x278>)
 8001e58:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e5a:	4b4e      	ldr	r3, [pc, #312]	; (8001f94 <HAL_RCC_OscConfig+0x27c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7fe ffca 	bl	8000df8 <HAL_InitTick>
 8001e64:	4603      	mov	r3, r0
 8001e66:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d052      	beq.n	8001f14 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001e6e:	7bfb      	ldrb	r3, [r7, #15]
 8001e70:	e35e      	b.n	8002530 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d032      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e7a:	4b43      	ldr	r3, [pc, #268]	; (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a42      	ldr	r2, [pc, #264]	; (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e86:	f7ff f807 	bl	8000e98 <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e8e:	f7ff f803 	bl	8000e98 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e347      	b.n	8002530 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ea0:	4b39      	ldr	r3, [pc, #228]	; (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0f0      	beq.n	8001e8e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001eac:	4b36      	ldr	r3, [pc, #216]	; (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a35      	ldr	r2, [pc, #212]	; (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001eb2:	f043 0308 	orr.w	r3, r3, #8
 8001eb6:	6013      	str	r3, [r2, #0]
 8001eb8:	4b33      	ldr	r3, [pc, #204]	; (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	4930      	ldr	r1, [pc, #192]	; (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001eca:	4b2f      	ldr	r3, [pc, #188]	; (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	021b      	lsls	r3, r3, #8
 8001ed8:	492b      	ldr	r1, [pc, #172]	; (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	604b      	str	r3, [r1, #4]
 8001ede:	e01a      	b.n	8001f16 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ee0:	4b29      	ldr	r3, [pc, #164]	; (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a28      	ldr	r2, [pc, #160]	; (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001ee6:	f023 0301 	bic.w	r3, r3, #1
 8001eea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001eec:	f7fe ffd4 	bl	8000e98 <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ef4:	f7fe ffd0 	bl	8000e98 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e314      	b.n	8002530 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f06:	4b20      	ldr	r3, [pc, #128]	; (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1f0      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x1dc>
 8001f12:	e000      	b.n	8001f16 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f14:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d073      	beq.n	800200a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	2b08      	cmp	r3, #8
 8001f26:	d005      	beq.n	8001f34 <HAL_RCC_OscConfig+0x21c>
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	2b0c      	cmp	r3, #12
 8001f2c:	d10e      	bne.n	8001f4c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	2b03      	cmp	r3, #3
 8001f32:	d10b      	bne.n	8001f4c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f34:	4b14      	ldr	r3, [pc, #80]	; (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d063      	beq.n	8002008 <HAL_RCC_OscConfig+0x2f0>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d15f      	bne.n	8002008 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e2f1      	b.n	8002530 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f54:	d106      	bne.n	8001f64 <HAL_RCC_OscConfig+0x24c>
 8001f56:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a0b      	ldr	r2, [pc, #44]	; (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f60:	6013      	str	r3, [r2, #0]
 8001f62:	e025      	b.n	8001fb0 <HAL_RCC_OscConfig+0x298>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f6c:	d114      	bne.n	8001f98 <HAL_RCC_OscConfig+0x280>
 8001f6e:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a05      	ldr	r2, [pc, #20]	; (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001f74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	4b03      	ldr	r3, [pc, #12]	; (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a02      	ldr	r2, [pc, #8]	; (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	e013      	b.n	8001fb0 <HAL_RCC_OscConfig+0x298>
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	080042dc 	.word	0x080042dc
 8001f90:	20000000 	.word	0x20000000
 8001f94:	20000004 	.word	0x20000004
 8001f98:	4ba0      	ldr	r3, [pc, #640]	; (800221c <HAL_RCC_OscConfig+0x504>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a9f      	ldr	r2, [pc, #636]	; (800221c <HAL_RCC_OscConfig+0x504>)
 8001f9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fa2:	6013      	str	r3, [r2, #0]
 8001fa4:	4b9d      	ldr	r3, [pc, #628]	; (800221c <HAL_RCC_OscConfig+0x504>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a9c      	ldr	r2, [pc, #624]	; (800221c <HAL_RCC_OscConfig+0x504>)
 8001faa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d013      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb8:	f7fe ff6e 	bl	8000e98 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc0:	f7fe ff6a 	bl	8000e98 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b64      	cmp	r3, #100	; 0x64
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e2ae      	b.n	8002530 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fd2:	4b92      	ldr	r3, [pc, #584]	; (800221c <HAL_RCC_OscConfig+0x504>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0f0      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x2a8>
 8001fde:	e014      	b.n	800200a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe0:	f7fe ff5a 	bl	8000e98 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fe8:	f7fe ff56 	bl	8000e98 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b64      	cmp	r3, #100	; 0x64
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e29a      	b.n	8002530 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ffa:	4b88      	ldr	r3, [pc, #544]	; (800221c <HAL_RCC_OscConfig+0x504>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1f0      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x2d0>
 8002006:	e000      	b.n	800200a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d060      	beq.n	80020d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	2b04      	cmp	r3, #4
 800201a:	d005      	beq.n	8002028 <HAL_RCC_OscConfig+0x310>
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	2b0c      	cmp	r3, #12
 8002020:	d119      	bne.n	8002056 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	2b02      	cmp	r3, #2
 8002026:	d116      	bne.n	8002056 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002028:	4b7c      	ldr	r3, [pc, #496]	; (800221c <HAL_RCC_OscConfig+0x504>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002030:	2b00      	cmp	r3, #0
 8002032:	d005      	beq.n	8002040 <HAL_RCC_OscConfig+0x328>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d101      	bne.n	8002040 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e277      	b.n	8002530 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002040:	4b76      	ldr	r3, [pc, #472]	; (800221c <HAL_RCC_OscConfig+0x504>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	061b      	lsls	r3, r3, #24
 800204e:	4973      	ldr	r1, [pc, #460]	; (800221c <HAL_RCC_OscConfig+0x504>)
 8002050:	4313      	orrs	r3, r2
 8002052:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002054:	e040      	b.n	80020d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d023      	beq.n	80020a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800205e:	4b6f      	ldr	r3, [pc, #444]	; (800221c <HAL_RCC_OscConfig+0x504>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a6e      	ldr	r2, [pc, #440]	; (800221c <HAL_RCC_OscConfig+0x504>)
 8002064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002068:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206a:	f7fe ff15 	bl	8000e98 <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002072:	f7fe ff11 	bl	8000e98 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e255      	b.n	8002530 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002084:	4b65      	ldr	r3, [pc, #404]	; (800221c <HAL_RCC_OscConfig+0x504>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0f0      	beq.n	8002072 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002090:	4b62      	ldr	r3, [pc, #392]	; (800221c <HAL_RCC_OscConfig+0x504>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	061b      	lsls	r3, r3, #24
 800209e:	495f      	ldr	r1, [pc, #380]	; (800221c <HAL_RCC_OscConfig+0x504>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	604b      	str	r3, [r1, #4]
 80020a4:	e018      	b.n	80020d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020a6:	4b5d      	ldr	r3, [pc, #372]	; (800221c <HAL_RCC_OscConfig+0x504>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a5c      	ldr	r2, [pc, #368]	; (800221c <HAL_RCC_OscConfig+0x504>)
 80020ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b2:	f7fe fef1 	bl	8000e98 <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ba:	f7fe feed 	bl	8000e98 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e231      	b.n	8002530 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020cc:	4b53      	ldr	r3, [pc, #332]	; (800221c <HAL_RCC_OscConfig+0x504>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1f0      	bne.n	80020ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0308 	and.w	r3, r3, #8
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d03c      	beq.n	800215e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	695b      	ldr	r3, [r3, #20]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d01c      	beq.n	8002126 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ec:	4b4b      	ldr	r3, [pc, #300]	; (800221c <HAL_RCC_OscConfig+0x504>)
 80020ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020f2:	4a4a      	ldr	r2, [pc, #296]	; (800221c <HAL_RCC_OscConfig+0x504>)
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020fc:	f7fe fecc 	bl	8000e98 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002104:	f7fe fec8 	bl	8000e98 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e20c      	b.n	8002530 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002116:	4b41      	ldr	r3, [pc, #260]	; (800221c <HAL_RCC_OscConfig+0x504>)
 8002118:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0ef      	beq.n	8002104 <HAL_RCC_OscConfig+0x3ec>
 8002124:	e01b      	b.n	800215e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002126:	4b3d      	ldr	r3, [pc, #244]	; (800221c <HAL_RCC_OscConfig+0x504>)
 8002128:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800212c:	4a3b      	ldr	r2, [pc, #236]	; (800221c <HAL_RCC_OscConfig+0x504>)
 800212e:	f023 0301 	bic.w	r3, r3, #1
 8002132:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002136:	f7fe feaf 	bl	8000e98 <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800213c:	e008      	b.n	8002150 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800213e:	f7fe feab 	bl	8000e98 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e1ef      	b.n	8002530 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002150:	4b32      	ldr	r3, [pc, #200]	; (800221c <HAL_RCC_OscConfig+0x504>)
 8002152:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1ef      	bne.n	800213e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0304 	and.w	r3, r3, #4
 8002166:	2b00      	cmp	r3, #0
 8002168:	f000 80a6 	beq.w	80022b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800216c:	2300      	movs	r3, #0
 800216e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002170:	4b2a      	ldr	r3, [pc, #168]	; (800221c <HAL_RCC_OscConfig+0x504>)
 8002172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10d      	bne.n	8002198 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800217c:	4b27      	ldr	r3, [pc, #156]	; (800221c <HAL_RCC_OscConfig+0x504>)
 800217e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002180:	4a26      	ldr	r2, [pc, #152]	; (800221c <HAL_RCC_OscConfig+0x504>)
 8002182:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002186:	6593      	str	r3, [r2, #88]	; 0x58
 8002188:	4b24      	ldr	r3, [pc, #144]	; (800221c <HAL_RCC_OscConfig+0x504>)
 800218a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002190:	60bb      	str	r3, [r7, #8]
 8002192:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002194:	2301      	movs	r3, #1
 8002196:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002198:	4b21      	ldr	r3, [pc, #132]	; (8002220 <HAL_RCC_OscConfig+0x508>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d118      	bne.n	80021d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021a4:	4b1e      	ldr	r3, [pc, #120]	; (8002220 <HAL_RCC_OscConfig+0x508>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a1d      	ldr	r2, [pc, #116]	; (8002220 <HAL_RCC_OscConfig+0x508>)
 80021aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021b0:	f7fe fe72 	bl	8000e98 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b8:	f7fe fe6e 	bl	8000e98 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e1b2      	b.n	8002530 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021ca:	4b15      	ldr	r3, [pc, #84]	; (8002220 <HAL_RCC_OscConfig+0x508>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0f0      	beq.n	80021b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d108      	bne.n	80021f0 <HAL_RCC_OscConfig+0x4d8>
 80021de:	4b0f      	ldr	r3, [pc, #60]	; (800221c <HAL_RCC_OscConfig+0x504>)
 80021e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e4:	4a0d      	ldr	r2, [pc, #52]	; (800221c <HAL_RCC_OscConfig+0x504>)
 80021e6:	f043 0301 	orr.w	r3, r3, #1
 80021ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021ee:	e029      	b.n	8002244 <HAL_RCC_OscConfig+0x52c>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	2b05      	cmp	r3, #5
 80021f6:	d115      	bne.n	8002224 <HAL_RCC_OscConfig+0x50c>
 80021f8:	4b08      	ldr	r3, [pc, #32]	; (800221c <HAL_RCC_OscConfig+0x504>)
 80021fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021fe:	4a07      	ldr	r2, [pc, #28]	; (800221c <HAL_RCC_OscConfig+0x504>)
 8002200:	f043 0304 	orr.w	r3, r3, #4
 8002204:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002208:	4b04      	ldr	r3, [pc, #16]	; (800221c <HAL_RCC_OscConfig+0x504>)
 800220a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800220e:	4a03      	ldr	r2, [pc, #12]	; (800221c <HAL_RCC_OscConfig+0x504>)
 8002210:	f043 0301 	orr.w	r3, r3, #1
 8002214:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002218:	e014      	b.n	8002244 <HAL_RCC_OscConfig+0x52c>
 800221a:	bf00      	nop
 800221c:	40021000 	.word	0x40021000
 8002220:	40007000 	.word	0x40007000
 8002224:	4b9a      	ldr	r3, [pc, #616]	; (8002490 <HAL_RCC_OscConfig+0x778>)
 8002226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222a:	4a99      	ldr	r2, [pc, #612]	; (8002490 <HAL_RCC_OscConfig+0x778>)
 800222c:	f023 0301 	bic.w	r3, r3, #1
 8002230:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002234:	4b96      	ldr	r3, [pc, #600]	; (8002490 <HAL_RCC_OscConfig+0x778>)
 8002236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800223a:	4a95      	ldr	r2, [pc, #596]	; (8002490 <HAL_RCC_OscConfig+0x778>)
 800223c:	f023 0304 	bic.w	r3, r3, #4
 8002240:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d016      	beq.n	800227a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800224c:	f7fe fe24 	bl	8000e98 <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002252:	e00a      	b.n	800226a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002254:	f7fe fe20 	bl	8000e98 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002262:	4293      	cmp	r3, r2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e162      	b.n	8002530 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800226a:	4b89      	ldr	r3, [pc, #548]	; (8002490 <HAL_RCC_OscConfig+0x778>)
 800226c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0ed      	beq.n	8002254 <HAL_RCC_OscConfig+0x53c>
 8002278:	e015      	b.n	80022a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800227a:	f7fe fe0d 	bl	8000e98 <HAL_GetTick>
 800227e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002280:	e00a      	b.n	8002298 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002282:	f7fe fe09 	bl	8000e98 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002290:	4293      	cmp	r3, r2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e14b      	b.n	8002530 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002298:	4b7d      	ldr	r3, [pc, #500]	; (8002490 <HAL_RCC_OscConfig+0x778>)
 800229a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1ed      	bne.n	8002282 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022a6:	7ffb      	ldrb	r3, [r7, #31]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d105      	bne.n	80022b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ac:	4b78      	ldr	r3, [pc, #480]	; (8002490 <HAL_RCC_OscConfig+0x778>)
 80022ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b0:	4a77      	ldr	r2, [pc, #476]	; (8002490 <HAL_RCC_OscConfig+0x778>)
 80022b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022b6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0320 	and.w	r3, r3, #32
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d03c      	beq.n	800233e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d01c      	beq.n	8002306 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80022cc:	4b70      	ldr	r3, [pc, #448]	; (8002490 <HAL_RCC_OscConfig+0x778>)
 80022ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022d2:	4a6f      	ldr	r2, [pc, #444]	; (8002490 <HAL_RCC_OscConfig+0x778>)
 80022d4:	f043 0301 	orr.w	r3, r3, #1
 80022d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022dc:	f7fe fddc 	bl	8000e98 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022e4:	f7fe fdd8 	bl	8000e98 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e11c      	b.n	8002530 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022f6:	4b66      	ldr	r3, [pc, #408]	; (8002490 <HAL_RCC_OscConfig+0x778>)
 80022f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d0ef      	beq.n	80022e4 <HAL_RCC_OscConfig+0x5cc>
 8002304:	e01b      	b.n	800233e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002306:	4b62      	ldr	r3, [pc, #392]	; (8002490 <HAL_RCC_OscConfig+0x778>)
 8002308:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800230c:	4a60      	ldr	r2, [pc, #384]	; (8002490 <HAL_RCC_OscConfig+0x778>)
 800230e:	f023 0301 	bic.w	r3, r3, #1
 8002312:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002316:	f7fe fdbf 	bl	8000e98 <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800231e:	f7fe fdbb 	bl	8000e98 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e0ff      	b.n	8002530 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002330:	4b57      	ldr	r3, [pc, #348]	; (8002490 <HAL_RCC_OscConfig+0x778>)
 8002332:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1ef      	bne.n	800231e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002342:	2b00      	cmp	r3, #0
 8002344:	f000 80f3 	beq.w	800252e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234c:	2b02      	cmp	r3, #2
 800234e:	f040 80c9 	bne.w	80024e4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002352:	4b4f      	ldr	r3, [pc, #316]	; (8002490 <HAL_RCC_OscConfig+0x778>)
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	f003 0203 	and.w	r2, r3, #3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002362:	429a      	cmp	r2, r3
 8002364:	d12c      	bne.n	80023c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002370:	3b01      	subs	r3, #1
 8002372:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002374:	429a      	cmp	r2, r3
 8002376:	d123      	bne.n	80023c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002382:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002384:	429a      	cmp	r2, r3
 8002386:	d11b      	bne.n	80023c0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002392:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002394:	429a      	cmp	r2, r3
 8002396:	d113      	bne.n	80023c0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a2:	085b      	lsrs	r3, r3, #1
 80023a4:	3b01      	subs	r3, #1
 80023a6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d109      	bne.n	80023c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	085b      	lsrs	r3, r3, #1
 80023b8:	3b01      	subs	r3, #1
 80023ba:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023bc:	429a      	cmp	r2, r3
 80023be:	d06b      	beq.n	8002498 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	2b0c      	cmp	r3, #12
 80023c4:	d062      	beq.n	800248c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80023c6:	4b32      	ldr	r3, [pc, #200]	; (8002490 <HAL_RCC_OscConfig+0x778>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e0ac      	b.n	8002530 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80023d6:	4b2e      	ldr	r3, [pc, #184]	; (8002490 <HAL_RCC_OscConfig+0x778>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a2d      	ldr	r2, [pc, #180]	; (8002490 <HAL_RCC_OscConfig+0x778>)
 80023dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023e0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023e2:	f7fe fd59 	bl	8000e98 <HAL_GetTick>
 80023e6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023e8:	e008      	b.n	80023fc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ea:	f7fe fd55 	bl	8000e98 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e099      	b.n	8002530 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023fc:	4b24      	ldr	r3, [pc, #144]	; (8002490 <HAL_RCC_OscConfig+0x778>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1f0      	bne.n	80023ea <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002408:	4b21      	ldr	r3, [pc, #132]	; (8002490 <HAL_RCC_OscConfig+0x778>)
 800240a:	68da      	ldr	r2, [r3, #12]
 800240c:	4b21      	ldr	r3, [pc, #132]	; (8002494 <HAL_RCC_OscConfig+0x77c>)
 800240e:	4013      	ands	r3, r2
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002418:	3a01      	subs	r2, #1
 800241a:	0112      	lsls	r2, r2, #4
 800241c:	4311      	orrs	r1, r2
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002422:	0212      	lsls	r2, r2, #8
 8002424:	4311      	orrs	r1, r2
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800242a:	0852      	lsrs	r2, r2, #1
 800242c:	3a01      	subs	r2, #1
 800242e:	0552      	lsls	r2, r2, #21
 8002430:	4311      	orrs	r1, r2
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002436:	0852      	lsrs	r2, r2, #1
 8002438:	3a01      	subs	r2, #1
 800243a:	0652      	lsls	r2, r2, #25
 800243c:	4311      	orrs	r1, r2
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002442:	06d2      	lsls	r2, r2, #27
 8002444:	430a      	orrs	r2, r1
 8002446:	4912      	ldr	r1, [pc, #72]	; (8002490 <HAL_RCC_OscConfig+0x778>)
 8002448:	4313      	orrs	r3, r2
 800244a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800244c:	4b10      	ldr	r3, [pc, #64]	; (8002490 <HAL_RCC_OscConfig+0x778>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a0f      	ldr	r2, [pc, #60]	; (8002490 <HAL_RCC_OscConfig+0x778>)
 8002452:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002456:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002458:	4b0d      	ldr	r3, [pc, #52]	; (8002490 <HAL_RCC_OscConfig+0x778>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	4a0c      	ldr	r2, [pc, #48]	; (8002490 <HAL_RCC_OscConfig+0x778>)
 800245e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002462:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002464:	f7fe fd18 	bl	8000e98 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800246c:	f7fe fd14 	bl	8000e98 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e058      	b.n	8002530 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800247e:	4b04      	ldr	r3, [pc, #16]	; (8002490 <HAL_RCC_OscConfig+0x778>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d0f0      	beq.n	800246c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800248a:	e050      	b.n	800252e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e04f      	b.n	8002530 <HAL_RCC_OscConfig+0x818>
 8002490:	40021000 	.word	0x40021000
 8002494:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002498:	4b27      	ldr	r3, [pc, #156]	; (8002538 <HAL_RCC_OscConfig+0x820>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d144      	bne.n	800252e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80024a4:	4b24      	ldr	r3, [pc, #144]	; (8002538 <HAL_RCC_OscConfig+0x820>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a23      	ldr	r2, [pc, #140]	; (8002538 <HAL_RCC_OscConfig+0x820>)
 80024aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024b0:	4b21      	ldr	r3, [pc, #132]	; (8002538 <HAL_RCC_OscConfig+0x820>)
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	4a20      	ldr	r2, [pc, #128]	; (8002538 <HAL_RCC_OscConfig+0x820>)
 80024b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80024bc:	f7fe fcec 	bl	8000e98 <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c4:	f7fe fce8 	bl	8000e98 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e02c      	b.n	8002530 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024d6:	4b18      	ldr	r3, [pc, #96]	; (8002538 <HAL_RCC_OscConfig+0x820>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <HAL_RCC_OscConfig+0x7ac>
 80024e2:	e024      	b.n	800252e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	2b0c      	cmp	r3, #12
 80024e8:	d01f      	beq.n	800252a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ea:	4b13      	ldr	r3, [pc, #76]	; (8002538 <HAL_RCC_OscConfig+0x820>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a12      	ldr	r2, [pc, #72]	; (8002538 <HAL_RCC_OscConfig+0x820>)
 80024f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f6:	f7fe fccf 	bl	8000e98 <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024fc:	e008      	b.n	8002510 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024fe:	f7fe fccb 	bl	8000e98 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e00f      	b.n	8002530 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002510:	4b09      	ldr	r3, [pc, #36]	; (8002538 <HAL_RCC_OscConfig+0x820>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1f0      	bne.n	80024fe <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800251c:	4b06      	ldr	r3, [pc, #24]	; (8002538 <HAL_RCC_OscConfig+0x820>)
 800251e:	68da      	ldr	r2, [r3, #12]
 8002520:	4905      	ldr	r1, [pc, #20]	; (8002538 <HAL_RCC_OscConfig+0x820>)
 8002522:	4b06      	ldr	r3, [pc, #24]	; (800253c <HAL_RCC_OscConfig+0x824>)
 8002524:	4013      	ands	r3, r2
 8002526:	60cb      	str	r3, [r1, #12]
 8002528:	e001      	b.n	800252e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e000      	b.n	8002530 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	3720      	adds	r7, #32
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	40021000 	.word	0x40021000
 800253c:	feeefffc 	.word	0xfeeefffc

08002540 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d101      	bne.n	8002554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e0e7      	b.n	8002724 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002554:	4b75      	ldr	r3, [pc, #468]	; (800272c <HAL_RCC_ClockConfig+0x1ec>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	429a      	cmp	r2, r3
 8002560:	d910      	bls.n	8002584 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002562:	4b72      	ldr	r3, [pc, #456]	; (800272c <HAL_RCC_ClockConfig+0x1ec>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f023 0207 	bic.w	r2, r3, #7
 800256a:	4970      	ldr	r1, [pc, #448]	; (800272c <HAL_RCC_ClockConfig+0x1ec>)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	4313      	orrs	r3, r2
 8002570:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002572:	4b6e      	ldr	r3, [pc, #440]	; (800272c <HAL_RCC_ClockConfig+0x1ec>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	429a      	cmp	r2, r3
 800257e:	d001      	beq.n	8002584 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e0cf      	b.n	8002724 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d010      	beq.n	80025b2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	4b66      	ldr	r3, [pc, #408]	; (8002730 <HAL_RCC_ClockConfig+0x1f0>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800259c:	429a      	cmp	r2, r3
 800259e:	d908      	bls.n	80025b2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025a0:	4b63      	ldr	r3, [pc, #396]	; (8002730 <HAL_RCC_ClockConfig+0x1f0>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	4960      	ldr	r1, [pc, #384]	; (8002730 <HAL_RCC_ClockConfig+0x1f0>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d04c      	beq.n	8002658 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2b03      	cmp	r3, #3
 80025c4:	d107      	bne.n	80025d6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025c6:	4b5a      	ldr	r3, [pc, #360]	; (8002730 <HAL_RCC_ClockConfig+0x1f0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d121      	bne.n	8002616 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e0a6      	b.n	8002724 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d107      	bne.n	80025ee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025de:	4b54      	ldr	r3, [pc, #336]	; (8002730 <HAL_RCC_ClockConfig+0x1f0>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d115      	bne.n	8002616 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e09a      	b.n	8002724 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d107      	bne.n	8002606 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025f6:	4b4e      	ldr	r3, [pc, #312]	; (8002730 <HAL_RCC_ClockConfig+0x1f0>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d109      	bne.n	8002616 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e08e      	b.n	8002724 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002606:	4b4a      	ldr	r3, [pc, #296]	; (8002730 <HAL_RCC_ClockConfig+0x1f0>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e086      	b.n	8002724 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002616:	4b46      	ldr	r3, [pc, #280]	; (8002730 <HAL_RCC_ClockConfig+0x1f0>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f023 0203 	bic.w	r2, r3, #3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	4943      	ldr	r1, [pc, #268]	; (8002730 <HAL_RCC_ClockConfig+0x1f0>)
 8002624:	4313      	orrs	r3, r2
 8002626:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002628:	f7fe fc36 	bl	8000e98 <HAL_GetTick>
 800262c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800262e:	e00a      	b.n	8002646 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002630:	f7fe fc32 	bl	8000e98 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	f241 3288 	movw	r2, #5000	; 0x1388
 800263e:	4293      	cmp	r3, r2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e06e      	b.n	8002724 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002646:	4b3a      	ldr	r3, [pc, #232]	; (8002730 <HAL_RCC_ClockConfig+0x1f0>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 020c 	and.w	r2, r3, #12
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	429a      	cmp	r2, r3
 8002656:	d1eb      	bne.n	8002630 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d010      	beq.n	8002686 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	4b31      	ldr	r3, [pc, #196]	; (8002730 <HAL_RCC_ClockConfig+0x1f0>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002670:	429a      	cmp	r2, r3
 8002672:	d208      	bcs.n	8002686 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002674:	4b2e      	ldr	r3, [pc, #184]	; (8002730 <HAL_RCC_ClockConfig+0x1f0>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	492b      	ldr	r1, [pc, #172]	; (8002730 <HAL_RCC_ClockConfig+0x1f0>)
 8002682:	4313      	orrs	r3, r2
 8002684:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002686:	4b29      	ldr	r3, [pc, #164]	; (800272c <HAL_RCC_ClockConfig+0x1ec>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	429a      	cmp	r2, r3
 8002692:	d210      	bcs.n	80026b6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002694:	4b25      	ldr	r3, [pc, #148]	; (800272c <HAL_RCC_ClockConfig+0x1ec>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f023 0207 	bic.w	r2, r3, #7
 800269c:	4923      	ldr	r1, [pc, #140]	; (800272c <HAL_RCC_ClockConfig+0x1ec>)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a4:	4b21      	ldr	r3, [pc, #132]	; (800272c <HAL_RCC_ClockConfig+0x1ec>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d001      	beq.n	80026b6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e036      	b.n	8002724 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0304 	and.w	r3, r3, #4
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d008      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026c2:	4b1b      	ldr	r3, [pc, #108]	; (8002730 <HAL_RCC_ClockConfig+0x1f0>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	4918      	ldr	r1, [pc, #96]	; (8002730 <HAL_RCC_ClockConfig+0x1f0>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0308 	and.w	r3, r3, #8
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d009      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026e0:	4b13      	ldr	r3, [pc, #76]	; (8002730 <HAL_RCC_ClockConfig+0x1f0>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	4910      	ldr	r1, [pc, #64]	; (8002730 <HAL_RCC_ClockConfig+0x1f0>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026f4:	f000 f824 	bl	8002740 <HAL_RCC_GetSysClockFreq>
 80026f8:	4602      	mov	r2, r0
 80026fa:	4b0d      	ldr	r3, [pc, #52]	; (8002730 <HAL_RCC_ClockConfig+0x1f0>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	091b      	lsrs	r3, r3, #4
 8002700:	f003 030f 	and.w	r3, r3, #15
 8002704:	490b      	ldr	r1, [pc, #44]	; (8002734 <HAL_RCC_ClockConfig+0x1f4>)
 8002706:	5ccb      	ldrb	r3, [r1, r3]
 8002708:	f003 031f 	and.w	r3, r3, #31
 800270c:	fa22 f303 	lsr.w	r3, r2, r3
 8002710:	4a09      	ldr	r2, [pc, #36]	; (8002738 <HAL_RCC_ClockConfig+0x1f8>)
 8002712:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002714:	4b09      	ldr	r3, [pc, #36]	; (800273c <HAL_RCC_ClockConfig+0x1fc>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f7fe fb6d 	bl	8000df8 <HAL_InitTick>
 800271e:	4603      	mov	r3, r0
 8002720:	72fb      	strb	r3, [r7, #11]

  return status;
 8002722:	7afb      	ldrb	r3, [r7, #11]
}
 8002724:	4618      	mov	r0, r3
 8002726:	3710      	adds	r7, #16
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40022000 	.word	0x40022000
 8002730:	40021000 	.word	0x40021000
 8002734:	080042dc 	.word	0x080042dc
 8002738:	20000000 	.word	0x20000000
 800273c:	20000004 	.word	0x20000004

08002740 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002740:	b480      	push	{r7}
 8002742:	b089      	sub	sp, #36	; 0x24
 8002744:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002746:	2300      	movs	r3, #0
 8002748:	61fb      	str	r3, [r7, #28]
 800274a:	2300      	movs	r3, #0
 800274c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800274e:	4b3e      	ldr	r3, [pc, #248]	; (8002848 <HAL_RCC_GetSysClockFreq+0x108>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 030c 	and.w	r3, r3, #12
 8002756:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002758:	4b3b      	ldr	r3, [pc, #236]	; (8002848 <HAL_RCC_GetSysClockFreq+0x108>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	f003 0303 	and.w	r3, r3, #3
 8002760:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d005      	beq.n	8002774 <HAL_RCC_GetSysClockFreq+0x34>
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	2b0c      	cmp	r3, #12
 800276c:	d121      	bne.n	80027b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d11e      	bne.n	80027b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002774:	4b34      	ldr	r3, [pc, #208]	; (8002848 <HAL_RCC_GetSysClockFreq+0x108>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0308 	and.w	r3, r3, #8
 800277c:	2b00      	cmp	r3, #0
 800277e:	d107      	bne.n	8002790 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002780:	4b31      	ldr	r3, [pc, #196]	; (8002848 <HAL_RCC_GetSysClockFreq+0x108>)
 8002782:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002786:	0a1b      	lsrs	r3, r3, #8
 8002788:	f003 030f 	and.w	r3, r3, #15
 800278c:	61fb      	str	r3, [r7, #28]
 800278e:	e005      	b.n	800279c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002790:	4b2d      	ldr	r3, [pc, #180]	; (8002848 <HAL_RCC_GetSysClockFreq+0x108>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	091b      	lsrs	r3, r3, #4
 8002796:	f003 030f 	and.w	r3, r3, #15
 800279a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800279c:	4a2b      	ldr	r2, [pc, #172]	; (800284c <HAL_RCC_GetSysClockFreq+0x10c>)
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d10d      	bne.n	80027c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027b0:	e00a      	b.n	80027c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	2b04      	cmp	r3, #4
 80027b6:	d102      	bne.n	80027be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027b8:	4b25      	ldr	r3, [pc, #148]	; (8002850 <HAL_RCC_GetSysClockFreq+0x110>)
 80027ba:	61bb      	str	r3, [r7, #24]
 80027bc:	e004      	b.n	80027c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	2b08      	cmp	r3, #8
 80027c2:	d101      	bne.n	80027c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027c4:	4b23      	ldr	r3, [pc, #140]	; (8002854 <HAL_RCC_GetSysClockFreq+0x114>)
 80027c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	2b0c      	cmp	r3, #12
 80027cc:	d134      	bne.n	8002838 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80027ce:	4b1e      	ldr	r3, [pc, #120]	; (8002848 <HAL_RCC_GetSysClockFreq+0x108>)
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	f003 0303 	and.w	r3, r3, #3
 80027d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d003      	beq.n	80027e6 <HAL_RCC_GetSysClockFreq+0xa6>
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	2b03      	cmp	r3, #3
 80027e2:	d003      	beq.n	80027ec <HAL_RCC_GetSysClockFreq+0xac>
 80027e4:	e005      	b.n	80027f2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80027e6:	4b1a      	ldr	r3, [pc, #104]	; (8002850 <HAL_RCC_GetSysClockFreq+0x110>)
 80027e8:	617b      	str	r3, [r7, #20]
      break;
 80027ea:	e005      	b.n	80027f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80027ec:	4b19      	ldr	r3, [pc, #100]	; (8002854 <HAL_RCC_GetSysClockFreq+0x114>)
 80027ee:	617b      	str	r3, [r7, #20]
      break;
 80027f0:	e002      	b.n	80027f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	617b      	str	r3, [r7, #20]
      break;
 80027f6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027f8:	4b13      	ldr	r3, [pc, #76]	; (8002848 <HAL_RCC_GetSysClockFreq+0x108>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	091b      	lsrs	r3, r3, #4
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	3301      	adds	r3, #1
 8002804:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002806:	4b10      	ldr	r3, [pc, #64]	; (8002848 <HAL_RCC_GetSysClockFreq+0x108>)
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	0a1b      	lsrs	r3, r3, #8
 800280c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	fb03 f202 	mul.w	r2, r3, r2
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	fbb2 f3f3 	udiv	r3, r2, r3
 800281c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800281e:	4b0a      	ldr	r3, [pc, #40]	; (8002848 <HAL_RCC_GetSysClockFreq+0x108>)
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	0e5b      	lsrs	r3, r3, #25
 8002824:	f003 0303 	and.w	r3, r3, #3
 8002828:	3301      	adds	r3, #1
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	fbb2 f3f3 	udiv	r3, r2, r3
 8002836:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002838:	69bb      	ldr	r3, [r7, #24]
}
 800283a:	4618      	mov	r0, r3
 800283c:	3724      	adds	r7, #36	; 0x24
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	40021000 	.word	0x40021000
 800284c:	080042f4 	.word	0x080042f4
 8002850:	00f42400 	.word	0x00f42400
 8002854:	007a1200 	.word	0x007a1200

08002858 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800285c:	4b03      	ldr	r3, [pc, #12]	; (800286c <HAL_RCC_GetHCLKFreq+0x14>)
 800285e:	681b      	ldr	r3, [r3, #0]
}
 8002860:	4618      	mov	r0, r3
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	20000000 	.word	0x20000000

08002870 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002874:	f7ff fff0 	bl	8002858 <HAL_RCC_GetHCLKFreq>
 8002878:	4602      	mov	r2, r0
 800287a:	4b06      	ldr	r3, [pc, #24]	; (8002894 <HAL_RCC_GetPCLK1Freq+0x24>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	0a1b      	lsrs	r3, r3, #8
 8002880:	f003 0307 	and.w	r3, r3, #7
 8002884:	4904      	ldr	r1, [pc, #16]	; (8002898 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002886:	5ccb      	ldrb	r3, [r1, r3]
 8002888:	f003 031f 	and.w	r3, r3, #31
 800288c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002890:	4618      	mov	r0, r3
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40021000 	.word	0x40021000
 8002898:	080042ec 	.word	0x080042ec

0800289c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80028a0:	f7ff ffda 	bl	8002858 <HAL_RCC_GetHCLKFreq>
 80028a4:	4602      	mov	r2, r0
 80028a6:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	0adb      	lsrs	r3, r3, #11
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	4904      	ldr	r1, [pc, #16]	; (80028c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80028b2:	5ccb      	ldrb	r3, [r1, r3]
 80028b4:	f003 031f 	and.w	r3, r3, #31
 80028b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028bc:	4618      	mov	r0, r3
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40021000 	.word	0x40021000
 80028c4:	080042ec 	.word	0x080042ec

080028c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80028d0:	2300      	movs	r3, #0
 80028d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80028d4:	4b2a      	ldr	r3, [pc, #168]	; (8002980 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80028e0:	f7ff f9b6 	bl	8001c50 <HAL_PWREx_GetVoltageRange>
 80028e4:	6178      	str	r0, [r7, #20]
 80028e6:	e014      	b.n	8002912 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80028e8:	4b25      	ldr	r3, [pc, #148]	; (8002980 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ec:	4a24      	ldr	r2, [pc, #144]	; (8002980 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f2:	6593      	str	r3, [r2, #88]	; 0x58
 80028f4:	4b22      	ldr	r3, [pc, #136]	; (8002980 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002900:	f7ff f9a6 	bl	8001c50 <HAL_PWREx_GetVoltageRange>
 8002904:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002906:	4b1e      	ldr	r3, [pc, #120]	; (8002980 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800290a:	4a1d      	ldr	r2, [pc, #116]	; (8002980 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800290c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002910:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002918:	d10b      	bne.n	8002932 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b80      	cmp	r3, #128	; 0x80
 800291e:	d919      	bls.n	8002954 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2ba0      	cmp	r3, #160	; 0xa0
 8002924:	d902      	bls.n	800292c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002926:	2302      	movs	r3, #2
 8002928:	613b      	str	r3, [r7, #16]
 800292a:	e013      	b.n	8002954 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800292c:	2301      	movs	r3, #1
 800292e:	613b      	str	r3, [r7, #16]
 8002930:	e010      	b.n	8002954 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b80      	cmp	r3, #128	; 0x80
 8002936:	d902      	bls.n	800293e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002938:	2303      	movs	r3, #3
 800293a:	613b      	str	r3, [r7, #16]
 800293c:	e00a      	b.n	8002954 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b80      	cmp	r3, #128	; 0x80
 8002942:	d102      	bne.n	800294a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002944:	2302      	movs	r3, #2
 8002946:	613b      	str	r3, [r7, #16]
 8002948:	e004      	b.n	8002954 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b70      	cmp	r3, #112	; 0x70
 800294e:	d101      	bne.n	8002954 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002950:	2301      	movs	r3, #1
 8002952:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002954:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f023 0207 	bic.w	r2, r3, #7
 800295c:	4909      	ldr	r1, [pc, #36]	; (8002984 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	4313      	orrs	r3, r2
 8002962:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002964:	4b07      	ldr	r3, [pc, #28]	; (8002984 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	429a      	cmp	r2, r3
 8002970:	d001      	beq.n	8002976 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e000      	b.n	8002978 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3718      	adds	r7, #24
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40021000 	.word	0x40021000
 8002984:	40022000 	.word	0x40022000

08002988 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002990:	2300      	movs	r3, #0
 8002992:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002994:	2300      	movs	r3, #0
 8002996:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d031      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80029ac:	d01a      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80029ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80029b2:	d814      	bhi.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x56>
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d009      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80029b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029bc:	d10f      	bne.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80029be:	4b5d      	ldr	r3, [pc, #372]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	4a5c      	ldr	r2, [pc, #368]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029ca:	e00c      	b.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	3304      	adds	r3, #4
 80029d0:	2100      	movs	r1, #0
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 fa44 	bl	8002e60 <RCCEx_PLLSAI1_Config>
 80029d8:	4603      	mov	r3, r0
 80029da:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029dc:	e003      	b.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	74fb      	strb	r3, [r7, #19]
      break;
 80029e2:	e000      	b.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80029e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029e6:	7cfb      	ldrb	r3, [r7, #19]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d10b      	bne.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029ec:	4b51      	ldr	r3, [pc, #324]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029fa:	494e      	ldr	r1, [pc, #312]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a02:	e001      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a04:	7cfb      	ldrb	r3, [r7, #19]
 8002a06:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f000 809e 	beq.w	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a16:	2300      	movs	r3, #0
 8002a18:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a1a:	4b46      	ldr	r3, [pc, #280]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002a26:	2301      	movs	r3, #1
 8002a28:	e000      	b.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00d      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a30:	4b40      	ldr	r3, [pc, #256]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a34:	4a3f      	ldr	r2, [pc, #252]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a3a:	6593      	str	r3, [r2, #88]	; 0x58
 8002a3c:	4b3d      	ldr	r3, [pc, #244]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a44:	60bb      	str	r3, [r7, #8]
 8002a46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a4c:	4b3a      	ldr	r3, [pc, #232]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a39      	ldr	r2, [pc, #228]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002a52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a58:	f7fe fa1e 	bl	8000e98 <HAL_GetTick>
 8002a5c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a5e:	e009      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a60:	f7fe fa1a 	bl	8000e98 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d902      	bls.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	74fb      	strb	r3, [r7, #19]
        break;
 8002a72:	e005      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a74:	4b30      	ldr	r3, [pc, #192]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0ef      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002a80:	7cfb      	ldrb	r3, [r7, #19]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d15a      	bne.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a86:	4b2b      	ldr	r3, [pc, #172]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a90:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d01e      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d019      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002aa2:	4b24      	ldr	r3, [pc, #144]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aac:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002aae:	4b21      	ldr	r3, [pc, #132]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab4:	4a1f      	ldr	r2, [pc, #124]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ab6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002abe:	4b1d      	ldr	r3, [pc, #116]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac4:	4a1b      	ldr	r2, [pc, #108]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ace:	4a19      	ldr	r2, [pc, #100]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d016      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae0:	f7fe f9da 	bl	8000e98 <HAL_GetTick>
 8002ae4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ae6:	e00b      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ae8:	f7fe f9d6 	bl	8000e98 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d902      	bls.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	74fb      	strb	r3, [r7, #19]
            break;
 8002afe:	e006      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b00:	4b0c      	ldr	r3, [pc, #48]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d0ec      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002b0e:	7cfb      	ldrb	r3, [r7, #19]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10b      	bne.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b14:	4b07      	ldr	r3, [pc, #28]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b22:	4904      	ldr	r1, [pc, #16]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002b2a:	e009      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b2c:	7cfb      	ldrb	r3, [r7, #19]
 8002b2e:	74bb      	strb	r3, [r7, #18]
 8002b30:	e006      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002b32:	bf00      	nop
 8002b34:	40021000 	.word	0x40021000
 8002b38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b3c:	7cfb      	ldrb	r3, [r7, #19]
 8002b3e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b40:	7c7b      	ldrb	r3, [r7, #17]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d105      	bne.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b46:	4b9e      	ldr	r3, [pc, #632]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b4a:	4a9d      	ldr	r2, [pc, #628]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b50:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00a      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b5e:	4b98      	ldr	r3, [pc, #608]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b64:	f023 0203 	bic.w	r2, r3, #3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	4994      	ldr	r1, [pc, #592]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00a      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b80:	4b8f      	ldr	r3, [pc, #572]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b86:	f023 020c 	bic.w	r2, r3, #12
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8e:	498c      	ldr	r1, [pc, #560]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0304 	and.w	r3, r3, #4
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00a      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ba2:	4b87      	ldr	r3, [pc, #540]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb0:	4983      	ldr	r1, [pc, #524]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0308 	and.w	r3, r3, #8
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00a      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002bc4:	4b7e      	ldr	r3, [pc, #504]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd2:	497b      	ldr	r1, [pc, #492]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0320 	and.w	r3, r3, #32
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00a      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002be6:	4b76      	ldr	r3, [pc, #472]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf4:	4972      	ldr	r1, [pc, #456]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00a      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c08:	4b6d      	ldr	r3, [pc, #436]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c0e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c16:	496a      	ldr	r1, [pc, #424]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00a      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c2a:	4b65      	ldr	r3, [pc, #404]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c38:	4961      	ldr	r1, [pc, #388]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00a      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c4c:	4b5c      	ldr	r3, [pc, #368]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c52:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c5a:	4959      	ldr	r1, [pc, #356]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00a      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c6e:	4b54      	ldr	r3, [pc, #336]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c74:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7c:	4950      	ldr	r1, [pc, #320]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00a      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c90:	4b4b      	ldr	r3, [pc, #300]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c96:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c9e:	4948      	ldr	r1, [pc, #288]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00a      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002cb2:	4b43      	ldr	r3, [pc, #268]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002cb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002cb8:	f023 0203 	bic.w	r2, r3, #3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc0:	493f      	ldr	r1, [pc, #252]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d028      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cd4:	4b3a      	ldr	r3, [pc, #232]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cda:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ce2:	4937      	ldr	r1, [pc, #220]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cf2:	d106      	bne.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cf4:	4b32      	ldr	r3, [pc, #200]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	4a31      	ldr	r2, [pc, #196]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002cfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cfe:	60d3      	str	r3, [r2, #12]
 8002d00:	e011      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d0a:	d10c      	bne.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3304      	adds	r3, #4
 8002d10:	2101      	movs	r1, #1
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 f8a4 	bl	8002e60 <RCCEx_PLLSAI1_Config>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002d1c:	7cfb      	ldrb	r3, [r7, #19]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8002d22:	7cfb      	ldrb	r3, [r7, #19]
 8002d24:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d028      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d32:	4b23      	ldr	r3, [pc, #140]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d38:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d40:	491f      	ldr	r1, [pc, #124]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d50:	d106      	bne.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d52:	4b1b      	ldr	r3, [pc, #108]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	4a1a      	ldr	r2, [pc, #104]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d5c:	60d3      	str	r3, [r2, #12]
 8002d5e:	e011      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d68:	d10c      	bne.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	2101      	movs	r1, #1
 8002d70:	4618      	mov	r0, r3
 8002d72:	f000 f875 	bl	8002e60 <RCCEx_PLLSAI1_Config>
 8002d76:	4603      	mov	r3, r0
 8002d78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d7a:	7cfb      	ldrb	r3, [r7, #19]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8002d80:	7cfb      	ldrb	r3, [r7, #19]
 8002d82:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d02b      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d90:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9e:	4908      	ldr	r1, [pc, #32]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002daa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dae:	d109      	bne.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002db0:	4b03      	ldr	r3, [pc, #12]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	4a02      	ldr	r2, [pc, #8]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002db6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dba:	60d3      	str	r3, [r2, #12]
 8002dbc:	e014      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8002dbe:	bf00      	nop
 8002dc0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002dcc:	d10c      	bne.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	3304      	adds	r3, #4
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f000 f843 	bl	8002e60 <RCCEx_PLLSAI1_Config>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dde:	7cfb      	ldrb	r3, [r7, #19]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8002de4:	7cfb      	ldrb	r3, [r7, #19]
 8002de6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d01c      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002df4:	4b19      	ldr	r3, [pc, #100]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e02:	4916      	ldr	r1, [pc, #88]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e12:	d10c      	bne.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3304      	adds	r3, #4
 8002e18:	2102      	movs	r1, #2
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f000 f820 	bl	8002e60 <RCCEx_PLLSAI1_Config>
 8002e20:	4603      	mov	r3, r0
 8002e22:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e24:	7cfb      	ldrb	r3, [r7, #19]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8002e2a:	7cfb      	ldrb	r3, [r7, #19]
 8002e2c:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00a      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e3a:	4b08      	ldr	r3, [pc, #32]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e40:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e48:	4904      	ldr	r1, [pc, #16]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e50:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3718      	adds	r7, #24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	40021000 	.word	0x40021000

08002e60 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e6e:	4b74      	ldr	r3, [pc, #464]	; (8003040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	f003 0303 	and.w	r3, r3, #3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d018      	beq.n	8002eac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002e7a:	4b71      	ldr	r3, [pc, #452]	; (8003040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	f003 0203 	and.w	r2, r3, #3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d10d      	bne.n	8002ea6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
       ||
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d009      	beq.n	8002ea6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002e92:	4b6b      	ldr	r3, [pc, #428]	; (8003040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	091b      	lsrs	r3, r3, #4
 8002e98:	f003 0307 	and.w	r3, r3, #7
 8002e9c:	1c5a      	adds	r2, r3, #1
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
       ||
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d047      	beq.n	8002f36 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	73fb      	strb	r3, [r7, #15]
 8002eaa:	e044      	b.n	8002f36 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2b03      	cmp	r3, #3
 8002eb2:	d018      	beq.n	8002ee6 <RCCEx_PLLSAI1_Config+0x86>
 8002eb4:	2b03      	cmp	r3, #3
 8002eb6:	d825      	bhi.n	8002f04 <RCCEx_PLLSAI1_Config+0xa4>
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d002      	beq.n	8002ec2 <RCCEx_PLLSAI1_Config+0x62>
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d009      	beq.n	8002ed4 <RCCEx_PLLSAI1_Config+0x74>
 8002ec0:	e020      	b.n	8002f04 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ec2:	4b5f      	ldr	r3, [pc, #380]	; (8003040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d11d      	bne.n	8002f0a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ed2:	e01a      	b.n	8002f0a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ed4:	4b5a      	ldr	r3, [pc, #360]	; (8003040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d116      	bne.n	8002f0e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ee4:	e013      	b.n	8002f0e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ee6:	4b56      	ldr	r3, [pc, #344]	; (8003040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d10f      	bne.n	8002f12 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ef2:	4b53      	ldr	r3, [pc, #332]	; (8003040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d109      	bne.n	8002f12 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f02:	e006      	b.n	8002f12 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	73fb      	strb	r3, [r7, #15]
      break;
 8002f08:	e004      	b.n	8002f14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f0a:	bf00      	nop
 8002f0c:	e002      	b.n	8002f14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f0e:	bf00      	nop
 8002f10:	e000      	b.n	8002f14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f12:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f14:	7bfb      	ldrb	r3, [r7, #15]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10d      	bne.n	8002f36 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f1a:	4b49      	ldr	r3, [pc, #292]	; (8003040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6819      	ldr	r1, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	011b      	lsls	r3, r3, #4
 8002f2e:	430b      	orrs	r3, r1
 8002f30:	4943      	ldr	r1, [pc, #268]	; (8003040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f36:	7bfb      	ldrb	r3, [r7, #15]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d17c      	bne.n	8003036 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f3c:	4b40      	ldr	r3, [pc, #256]	; (8003040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a3f      	ldr	r2, [pc, #252]	; (8003040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f42:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f48:	f7fd ffa6 	bl	8000e98 <HAL_GetTick>
 8002f4c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f4e:	e009      	b.n	8002f64 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f50:	f7fd ffa2 	bl	8000e98 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d902      	bls.n	8002f64 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	73fb      	strb	r3, [r7, #15]
        break;
 8002f62:	e005      	b.n	8002f70 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f64:	4b36      	ldr	r3, [pc, #216]	; (8003040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1ef      	bne.n	8002f50 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f70:	7bfb      	ldrb	r3, [r7, #15]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d15f      	bne.n	8003036 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d110      	bne.n	8002f9e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f7c:	4b30      	ldr	r3, [pc, #192]	; (8003040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002f84:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	6892      	ldr	r2, [r2, #8]
 8002f8c:	0211      	lsls	r1, r2, #8
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	68d2      	ldr	r2, [r2, #12]
 8002f92:	06d2      	lsls	r2, r2, #27
 8002f94:	430a      	orrs	r2, r1
 8002f96:	492a      	ldr	r1, [pc, #168]	; (8003040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	610b      	str	r3, [r1, #16]
 8002f9c:	e027      	b.n	8002fee <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d112      	bne.n	8002fca <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fa4:	4b26      	ldr	r3, [pc, #152]	; (8003040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002fac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	6892      	ldr	r2, [r2, #8]
 8002fb4:	0211      	lsls	r1, r2, #8
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	6912      	ldr	r2, [r2, #16]
 8002fba:	0852      	lsrs	r2, r2, #1
 8002fbc:	3a01      	subs	r2, #1
 8002fbe:	0552      	lsls	r2, r2, #21
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	491f      	ldr	r1, [pc, #124]	; (8003040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	610b      	str	r3, [r1, #16]
 8002fc8:	e011      	b.n	8002fee <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fca:	4b1d      	ldr	r3, [pc, #116]	; (8003040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002fd2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	6892      	ldr	r2, [r2, #8]
 8002fda:	0211      	lsls	r1, r2, #8
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	6952      	ldr	r2, [r2, #20]
 8002fe0:	0852      	lsrs	r2, r2, #1
 8002fe2:	3a01      	subs	r2, #1
 8002fe4:	0652      	lsls	r2, r2, #25
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	4915      	ldr	r1, [pc, #84]	; (8003040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002fee:	4b14      	ldr	r3, [pc, #80]	; (8003040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a13      	ldr	r2, [pc, #76]	; (8003040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ff4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ff8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ffa:	f7fd ff4d 	bl	8000e98 <HAL_GetTick>
 8002ffe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003000:	e009      	b.n	8003016 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003002:	f7fd ff49 	bl	8000e98 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d902      	bls.n	8003016 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	73fb      	strb	r3, [r7, #15]
          break;
 8003014:	e005      	b.n	8003022 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003016:	4b0a      	ldr	r3, [pc, #40]	; (8003040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0ef      	beq.n	8003002 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003022:	7bfb      	ldrb	r3, [r7, #15]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d106      	bne.n	8003036 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003028:	4b05      	ldr	r3, [pc, #20]	; (8003040 <RCCEx_PLLSAI1_Config+0x1e0>)
 800302a:	691a      	ldr	r2, [r3, #16]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	4903      	ldr	r1, [pc, #12]	; (8003040 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003032:	4313      	orrs	r3, r2
 8003034:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003036:	7bfb      	ldrb	r3, [r7, #15]
}
 8003038:	4618      	mov	r0, r3
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40021000 	.word	0x40021000

08003044 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e040      	b.n	80030d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800305a:	2b00      	cmp	r3, #0
 800305c:	d106      	bne.n	800306c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7fd fdae 	bl	8000bc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2224      	movs	r2, #36	; 0x24
 8003070:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 0201 	bic.w	r2, r2, #1
 8003080:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f82c 	bl	80030e0 <UART_SetConfig>
 8003088:	4603      	mov	r3, r0
 800308a:	2b01      	cmp	r3, #1
 800308c:	d101      	bne.n	8003092 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e022      	b.n	80030d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	2b00      	cmp	r3, #0
 8003098:	d002      	beq.n	80030a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 faa6 	bl	80035ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689a      	ldr	r2, [r3, #8]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0201 	orr.w	r2, r2, #1
 80030ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 fb2d 	bl	8003730 <UART_CheckIdleState>
 80030d6:	4603      	mov	r3, r0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030e4:	b08a      	sub	sp, #40	; 0x28
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030ea:	2300      	movs	r3, #0
 80030ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	431a      	orrs	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	431a      	orrs	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	69db      	ldr	r3, [r3, #28]
 8003104:	4313      	orrs	r3, r2
 8003106:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	4ba5      	ldr	r3, [pc, #660]	; (80033a4 <UART_SetConfig+0x2c4>)
 8003110:	4013      	ands	r3, r2
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	6812      	ldr	r2, [r2, #0]
 8003116:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003118:	430b      	orrs	r3, r1
 800311a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	68da      	ldr	r2, [r3, #12]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	430a      	orrs	r2, r1
 8003130:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a9a      	ldr	r2, [pc, #616]	; (80033a8 <UART_SetConfig+0x2c8>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d004      	beq.n	800314c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003148:	4313      	orrs	r3, r2
 800314a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800315c:	430a      	orrs	r2, r1
 800315e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a91      	ldr	r2, [pc, #580]	; (80033ac <UART_SetConfig+0x2cc>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d126      	bne.n	80031b8 <UART_SetConfig+0xd8>
 800316a:	4b91      	ldr	r3, [pc, #580]	; (80033b0 <UART_SetConfig+0x2d0>)
 800316c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003170:	f003 0303 	and.w	r3, r3, #3
 8003174:	2b03      	cmp	r3, #3
 8003176:	d81b      	bhi.n	80031b0 <UART_SetConfig+0xd0>
 8003178:	a201      	add	r2, pc, #4	; (adr r2, 8003180 <UART_SetConfig+0xa0>)
 800317a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800317e:	bf00      	nop
 8003180:	08003191 	.word	0x08003191
 8003184:	080031a1 	.word	0x080031a1
 8003188:	08003199 	.word	0x08003199
 800318c:	080031a9 	.word	0x080031a9
 8003190:	2301      	movs	r3, #1
 8003192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003196:	e0d6      	b.n	8003346 <UART_SetConfig+0x266>
 8003198:	2302      	movs	r3, #2
 800319a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800319e:	e0d2      	b.n	8003346 <UART_SetConfig+0x266>
 80031a0:	2304      	movs	r3, #4
 80031a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031a6:	e0ce      	b.n	8003346 <UART_SetConfig+0x266>
 80031a8:	2308      	movs	r3, #8
 80031aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031ae:	e0ca      	b.n	8003346 <UART_SetConfig+0x266>
 80031b0:	2310      	movs	r3, #16
 80031b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031b6:	e0c6      	b.n	8003346 <UART_SetConfig+0x266>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a7d      	ldr	r2, [pc, #500]	; (80033b4 <UART_SetConfig+0x2d4>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d138      	bne.n	8003234 <UART_SetConfig+0x154>
 80031c2:	4b7b      	ldr	r3, [pc, #492]	; (80033b0 <UART_SetConfig+0x2d0>)
 80031c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c8:	f003 030c 	and.w	r3, r3, #12
 80031cc:	2b0c      	cmp	r3, #12
 80031ce:	d82d      	bhi.n	800322c <UART_SetConfig+0x14c>
 80031d0:	a201      	add	r2, pc, #4	; (adr r2, 80031d8 <UART_SetConfig+0xf8>)
 80031d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d6:	bf00      	nop
 80031d8:	0800320d 	.word	0x0800320d
 80031dc:	0800322d 	.word	0x0800322d
 80031e0:	0800322d 	.word	0x0800322d
 80031e4:	0800322d 	.word	0x0800322d
 80031e8:	0800321d 	.word	0x0800321d
 80031ec:	0800322d 	.word	0x0800322d
 80031f0:	0800322d 	.word	0x0800322d
 80031f4:	0800322d 	.word	0x0800322d
 80031f8:	08003215 	.word	0x08003215
 80031fc:	0800322d 	.word	0x0800322d
 8003200:	0800322d 	.word	0x0800322d
 8003204:	0800322d 	.word	0x0800322d
 8003208:	08003225 	.word	0x08003225
 800320c:	2300      	movs	r3, #0
 800320e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003212:	e098      	b.n	8003346 <UART_SetConfig+0x266>
 8003214:	2302      	movs	r3, #2
 8003216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800321a:	e094      	b.n	8003346 <UART_SetConfig+0x266>
 800321c:	2304      	movs	r3, #4
 800321e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003222:	e090      	b.n	8003346 <UART_SetConfig+0x266>
 8003224:	2308      	movs	r3, #8
 8003226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800322a:	e08c      	b.n	8003346 <UART_SetConfig+0x266>
 800322c:	2310      	movs	r3, #16
 800322e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003232:	e088      	b.n	8003346 <UART_SetConfig+0x266>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a5f      	ldr	r2, [pc, #380]	; (80033b8 <UART_SetConfig+0x2d8>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d125      	bne.n	800328a <UART_SetConfig+0x1aa>
 800323e:	4b5c      	ldr	r3, [pc, #368]	; (80033b0 <UART_SetConfig+0x2d0>)
 8003240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003244:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003248:	2b30      	cmp	r3, #48	; 0x30
 800324a:	d016      	beq.n	800327a <UART_SetConfig+0x19a>
 800324c:	2b30      	cmp	r3, #48	; 0x30
 800324e:	d818      	bhi.n	8003282 <UART_SetConfig+0x1a2>
 8003250:	2b20      	cmp	r3, #32
 8003252:	d00a      	beq.n	800326a <UART_SetConfig+0x18a>
 8003254:	2b20      	cmp	r3, #32
 8003256:	d814      	bhi.n	8003282 <UART_SetConfig+0x1a2>
 8003258:	2b00      	cmp	r3, #0
 800325a:	d002      	beq.n	8003262 <UART_SetConfig+0x182>
 800325c:	2b10      	cmp	r3, #16
 800325e:	d008      	beq.n	8003272 <UART_SetConfig+0x192>
 8003260:	e00f      	b.n	8003282 <UART_SetConfig+0x1a2>
 8003262:	2300      	movs	r3, #0
 8003264:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003268:	e06d      	b.n	8003346 <UART_SetConfig+0x266>
 800326a:	2302      	movs	r3, #2
 800326c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003270:	e069      	b.n	8003346 <UART_SetConfig+0x266>
 8003272:	2304      	movs	r3, #4
 8003274:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003278:	e065      	b.n	8003346 <UART_SetConfig+0x266>
 800327a:	2308      	movs	r3, #8
 800327c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003280:	e061      	b.n	8003346 <UART_SetConfig+0x266>
 8003282:	2310      	movs	r3, #16
 8003284:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003288:	e05d      	b.n	8003346 <UART_SetConfig+0x266>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a4b      	ldr	r2, [pc, #300]	; (80033bc <UART_SetConfig+0x2dc>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d125      	bne.n	80032e0 <UART_SetConfig+0x200>
 8003294:	4b46      	ldr	r3, [pc, #280]	; (80033b0 <UART_SetConfig+0x2d0>)
 8003296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800329e:	2bc0      	cmp	r3, #192	; 0xc0
 80032a0:	d016      	beq.n	80032d0 <UART_SetConfig+0x1f0>
 80032a2:	2bc0      	cmp	r3, #192	; 0xc0
 80032a4:	d818      	bhi.n	80032d8 <UART_SetConfig+0x1f8>
 80032a6:	2b80      	cmp	r3, #128	; 0x80
 80032a8:	d00a      	beq.n	80032c0 <UART_SetConfig+0x1e0>
 80032aa:	2b80      	cmp	r3, #128	; 0x80
 80032ac:	d814      	bhi.n	80032d8 <UART_SetConfig+0x1f8>
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d002      	beq.n	80032b8 <UART_SetConfig+0x1d8>
 80032b2:	2b40      	cmp	r3, #64	; 0x40
 80032b4:	d008      	beq.n	80032c8 <UART_SetConfig+0x1e8>
 80032b6:	e00f      	b.n	80032d8 <UART_SetConfig+0x1f8>
 80032b8:	2300      	movs	r3, #0
 80032ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032be:	e042      	b.n	8003346 <UART_SetConfig+0x266>
 80032c0:	2302      	movs	r3, #2
 80032c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032c6:	e03e      	b.n	8003346 <UART_SetConfig+0x266>
 80032c8:	2304      	movs	r3, #4
 80032ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ce:	e03a      	b.n	8003346 <UART_SetConfig+0x266>
 80032d0:	2308      	movs	r3, #8
 80032d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032d6:	e036      	b.n	8003346 <UART_SetConfig+0x266>
 80032d8:	2310      	movs	r3, #16
 80032da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032de:	e032      	b.n	8003346 <UART_SetConfig+0x266>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a30      	ldr	r2, [pc, #192]	; (80033a8 <UART_SetConfig+0x2c8>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d12a      	bne.n	8003340 <UART_SetConfig+0x260>
 80032ea:	4b31      	ldr	r3, [pc, #196]	; (80033b0 <UART_SetConfig+0x2d0>)
 80032ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80032f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032f8:	d01a      	beq.n	8003330 <UART_SetConfig+0x250>
 80032fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032fe:	d81b      	bhi.n	8003338 <UART_SetConfig+0x258>
 8003300:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003304:	d00c      	beq.n	8003320 <UART_SetConfig+0x240>
 8003306:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800330a:	d815      	bhi.n	8003338 <UART_SetConfig+0x258>
 800330c:	2b00      	cmp	r3, #0
 800330e:	d003      	beq.n	8003318 <UART_SetConfig+0x238>
 8003310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003314:	d008      	beq.n	8003328 <UART_SetConfig+0x248>
 8003316:	e00f      	b.n	8003338 <UART_SetConfig+0x258>
 8003318:	2300      	movs	r3, #0
 800331a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800331e:	e012      	b.n	8003346 <UART_SetConfig+0x266>
 8003320:	2302      	movs	r3, #2
 8003322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003326:	e00e      	b.n	8003346 <UART_SetConfig+0x266>
 8003328:	2304      	movs	r3, #4
 800332a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800332e:	e00a      	b.n	8003346 <UART_SetConfig+0x266>
 8003330:	2308      	movs	r3, #8
 8003332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003336:	e006      	b.n	8003346 <UART_SetConfig+0x266>
 8003338:	2310      	movs	r3, #16
 800333a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800333e:	e002      	b.n	8003346 <UART_SetConfig+0x266>
 8003340:	2310      	movs	r3, #16
 8003342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a17      	ldr	r2, [pc, #92]	; (80033a8 <UART_SetConfig+0x2c8>)
 800334c:	4293      	cmp	r3, r2
 800334e:	f040 808b 	bne.w	8003468 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003352:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003356:	2b08      	cmp	r3, #8
 8003358:	d834      	bhi.n	80033c4 <UART_SetConfig+0x2e4>
 800335a:	a201      	add	r2, pc, #4	; (adr r2, 8003360 <UART_SetConfig+0x280>)
 800335c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003360:	08003385 	.word	0x08003385
 8003364:	080033c5 	.word	0x080033c5
 8003368:	0800338d 	.word	0x0800338d
 800336c:	080033c5 	.word	0x080033c5
 8003370:	08003393 	.word	0x08003393
 8003374:	080033c5 	.word	0x080033c5
 8003378:	080033c5 	.word	0x080033c5
 800337c:	080033c5 	.word	0x080033c5
 8003380:	0800339b 	.word	0x0800339b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003384:	f7ff fa74 	bl	8002870 <HAL_RCC_GetPCLK1Freq>
 8003388:	61f8      	str	r0, [r7, #28]
        break;
 800338a:	e021      	b.n	80033d0 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800338c:	4b0c      	ldr	r3, [pc, #48]	; (80033c0 <UART_SetConfig+0x2e0>)
 800338e:	61fb      	str	r3, [r7, #28]
        break;
 8003390:	e01e      	b.n	80033d0 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003392:	f7ff f9d5 	bl	8002740 <HAL_RCC_GetSysClockFreq>
 8003396:	61f8      	str	r0, [r7, #28]
        break;
 8003398:	e01a      	b.n	80033d0 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800339a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800339e:	61fb      	str	r3, [r7, #28]
        break;
 80033a0:	e016      	b.n	80033d0 <UART_SetConfig+0x2f0>
 80033a2:	bf00      	nop
 80033a4:	efff69f3 	.word	0xefff69f3
 80033a8:	40008000 	.word	0x40008000
 80033ac:	40013800 	.word	0x40013800
 80033b0:	40021000 	.word	0x40021000
 80033b4:	40004400 	.word	0x40004400
 80033b8:	40004800 	.word	0x40004800
 80033bc:	40004c00 	.word	0x40004c00
 80033c0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80033c4:	2300      	movs	r3, #0
 80033c6:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80033ce:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f000 80fa 	beq.w	80035cc <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	4613      	mov	r3, r2
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	4413      	add	r3, r2
 80033e2:	69fa      	ldr	r2, [r7, #28]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d305      	bcc.n	80033f4 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80033ee:	69fa      	ldr	r2, [r7, #28]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d903      	bls.n	80033fc <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80033fa:	e0e7      	b.n	80035cc <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	2200      	movs	r2, #0
 8003400:	461c      	mov	r4, r3
 8003402:	4615      	mov	r5, r2
 8003404:	f04f 0200 	mov.w	r2, #0
 8003408:	f04f 0300 	mov.w	r3, #0
 800340c:	022b      	lsls	r3, r5, #8
 800340e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003412:	0222      	lsls	r2, r4, #8
 8003414:	68f9      	ldr	r1, [r7, #12]
 8003416:	6849      	ldr	r1, [r1, #4]
 8003418:	0849      	lsrs	r1, r1, #1
 800341a:	2000      	movs	r0, #0
 800341c:	4688      	mov	r8, r1
 800341e:	4681      	mov	r9, r0
 8003420:	eb12 0a08 	adds.w	sl, r2, r8
 8003424:	eb43 0b09 	adc.w	fp, r3, r9
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	603b      	str	r3, [r7, #0]
 8003430:	607a      	str	r2, [r7, #4]
 8003432:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003436:	4650      	mov	r0, sl
 8003438:	4659      	mov	r1, fp
 800343a:	f7fc ff21 	bl	8000280 <__aeabi_uldivmod>
 800343e:	4602      	mov	r2, r0
 8003440:	460b      	mov	r3, r1
 8003442:	4613      	mov	r3, r2
 8003444:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800344c:	d308      	bcc.n	8003460 <UART_SetConfig+0x380>
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003454:	d204      	bcs.n	8003460 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	60da      	str	r2, [r3, #12]
 800345e:	e0b5      	b.n	80035cc <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003466:	e0b1      	b.n	80035cc <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	69db      	ldr	r3, [r3, #28]
 800346c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003470:	d15d      	bne.n	800352e <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8003472:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003476:	2b08      	cmp	r3, #8
 8003478:	d827      	bhi.n	80034ca <UART_SetConfig+0x3ea>
 800347a:	a201      	add	r2, pc, #4	; (adr r2, 8003480 <UART_SetConfig+0x3a0>)
 800347c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003480:	080034a5 	.word	0x080034a5
 8003484:	080034ad 	.word	0x080034ad
 8003488:	080034b5 	.word	0x080034b5
 800348c:	080034cb 	.word	0x080034cb
 8003490:	080034bb 	.word	0x080034bb
 8003494:	080034cb 	.word	0x080034cb
 8003498:	080034cb 	.word	0x080034cb
 800349c:	080034cb 	.word	0x080034cb
 80034a0:	080034c3 	.word	0x080034c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034a4:	f7ff f9e4 	bl	8002870 <HAL_RCC_GetPCLK1Freq>
 80034a8:	61f8      	str	r0, [r7, #28]
        break;
 80034aa:	e014      	b.n	80034d6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034ac:	f7ff f9f6 	bl	800289c <HAL_RCC_GetPCLK2Freq>
 80034b0:	61f8      	str	r0, [r7, #28]
        break;
 80034b2:	e010      	b.n	80034d6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034b4:	4b4c      	ldr	r3, [pc, #304]	; (80035e8 <UART_SetConfig+0x508>)
 80034b6:	61fb      	str	r3, [r7, #28]
        break;
 80034b8:	e00d      	b.n	80034d6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034ba:	f7ff f941 	bl	8002740 <HAL_RCC_GetSysClockFreq>
 80034be:	61f8      	str	r0, [r7, #28]
        break;
 80034c0:	e009      	b.n	80034d6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034c6:	61fb      	str	r3, [r7, #28]
        break;
 80034c8:	e005      	b.n	80034d6 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 80034ca:	2300      	movs	r3, #0
 80034cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80034d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d077      	beq.n	80035cc <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	005a      	lsls	r2, r3, #1
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	085b      	lsrs	r3, r3, #1
 80034e6:	441a      	add	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	2b0f      	cmp	r3, #15
 80034f6:	d916      	bls.n	8003526 <UART_SetConfig+0x446>
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034fe:	d212      	bcs.n	8003526 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	b29b      	uxth	r3, r3
 8003504:	f023 030f 	bic.w	r3, r3, #15
 8003508:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	085b      	lsrs	r3, r3, #1
 800350e:	b29b      	uxth	r3, r3
 8003510:	f003 0307 	and.w	r3, r3, #7
 8003514:	b29a      	uxth	r2, r3
 8003516:	8afb      	ldrh	r3, [r7, #22]
 8003518:	4313      	orrs	r3, r2
 800351a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	8afa      	ldrh	r2, [r7, #22]
 8003522:	60da      	str	r2, [r3, #12]
 8003524:	e052      	b.n	80035cc <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800352c:	e04e      	b.n	80035cc <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 800352e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003532:	2b08      	cmp	r3, #8
 8003534:	d827      	bhi.n	8003586 <UART_SetConfig+0x4a6>
 8003536:	a201      	add	r2, pc, #4	; (adr r2, 800353c <UART_SetConfig+0x45c>)
 8003538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800353c:	08003561 	.word	0x08003561
 8003540:	08003569 	.word	0x08003569
 8003544:	08003571 	.word	0x08003571
 8003548:	08003587 	.word	0x08003587
 800354c:	08003577 	.word	0x08003577
 8003550:	08003587 	.word	0x08003587
 8003554:	08003587 	.word	0x08003587
 8003558:	08003587 	.word	0x08003587
 800355c:	0800357f 	.word	0x0800357f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003560:	f7ff f986 	bl	8002870 <HAL_RCC_GetPCLK1Freq>
 8003564:	61f8      	str	r0, [r7, #28]
        break;
 8003566:	e014      	b.n	8003592 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003568:	f7ff f998 	bl	800289c <HAL_RCC_GetPCLK2Freq>
 800356c:	61f8      	str	r0, [r7, #28]
        break;
 800356e:	e010      	b.n	8003592 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003570:	4b1d      	ldr	r3, [pc, #116]	; (80035e8 <UART_SetConfig+0x508>)
 8003572:	61fb      	str	r3, [r7, #28]
        break;
 8003574:	e00d      	b.n	8003592 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003576:	f7ff f8e3 	bl	8002740 <HAL_RCC_GetSysClockFreq>
 800357a:	61f8      	str	r0, [r7, #28]
        break;
 800357c:	e009      	b.n	8003592 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800357e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003582:	61fb      	str	r3, [r7, #28]
        break;
 8003584:	e005      	b.n	8003592 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8003586:	2300      	movs	r3, #0
 8003588:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003590:	bf00      	nop
    }

    if (pclk != 0U)
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d019      	beq.n	80035cc <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	085a      	lsrs	r2, r3, #1
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	441a      	add	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035aa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	2b0f      	cmp	r3, #15
 80035b0:	d909      	bls.n	80035c6 <UART_SetConfig+0x4e6>
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035b8:	d205      	bcs.n	80035c6 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	b29a      	uxth	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	60da      	str	r2, [r3, #12]
 80035c4:	e002      	b.n	80035cc <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80035d8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3728      	adds	r7, #40	; 0x28
 80035e0:	46bd      	mov	sp, r7
 80035e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035e6:	bf00      	nop
 80035e8:	00f42400 	.word	0x00f42400

080035ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00a      	beq.n	8003616 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	430a      	orrs	r2, r1
 8003614:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00a      	beq.n	8003638 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	430a      	orrs	r2, r1
 8003636:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363c:	f003 0304 	and.w	r3, r3, #4
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00a      	beq.n	800365a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	f003 0308 	and.w	r3, r3, #8
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00a      	beq.n	800367c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	430a      	orrs	r2, r1
 800367a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003680:	f003 0310 	and.w	r3, r3, #16
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00a      	beq.n	800369e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a2:	f003 0320 	and.w	r3, r3, #32
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00a      	beq.n	80036c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d01a      	beq.n	8003702 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036ea:	d10a      	bne.n	8003702 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00a      	beq.n	8003724 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	605a      	str	r2, [r3, #4]
  }
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af02      	add	r7, sp, #8
 8003736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003740:	f7fd fbaa 	bl	8000e98 <HAL_GetTick>
 8003744:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0308 	and.w	r3, r3, #8
 8003750:	2b08      	cmp	r3, #8
 8003752:	d10e      	bne.n	8003772 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003754:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f82d 	bl	80037c2 <UART_WaitOnFlagUntilTimeout>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e023      	b.n	80037ba <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0304 	and.w	r3, r3, #4
 800377c:	2b04      	cmp	r3, #4
 800377e:	d10e      	bne.n	800379e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003780:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003784:	9300      	str	r3, [sp, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 f817 	bl	80037c2 <UART_WaitOnFlagUntilTimeout>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e00d      	b.n	80037ba <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2220      	movs	r2, #32
 80037a2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2220      	movs	r2, #32
 80037a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3710      	adds	r7, #16
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b09c      	sub	sp, #112	; 0x70
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	60f8      	str	r0, [r7, #12]
 80037ca:	60b9      	str	r1, [r7, #8]
 80037cc:	603b      	str	r3, [r7, #0]
 80037ce:	4613      	mov	r3, r2
 80037d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037d2:	e0a5      	b.n	8003920 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037da:	f000 80a1 	beq.w	8003920 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037de:	f7fd fb5b 	bl	8000e98 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d302      	bcc.n	80037f4 <UART_WaitOnFlagUntilTimeout+0x32>
 80037ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d13e      	bne.n	8003872 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037fc:	e853 3f00 	ldrex	r3, [r3]
 8003800:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003804:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003808:	667b      	str	r3, [r7, #100]	; 0x64
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	461a      	mov	r2, r3
 8003810:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003812:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003814:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003816:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003818:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800381a:	e841 2300 	strex	r3, r2, [r1]
 800381e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003820:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1e6      	bne.n	80037f4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	3308      	adds	r3, #8
 800382c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003830:	e853 3f00 	ldrex	r3, [r3]
 8003834:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003838:	f023 0301 	bic.w	r3, r3, #1
 800383c:	663b      	str	r3, [r7, #96]	; 0x60
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	3308      	adds	r3, #8
 8003844:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003846:	64ba      	str	r2, [r7, #72]	; 0x48
 8003848:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800384c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800384e:	e841 2300 	strex	r3, r2, [r1]
 8003852:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003854:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1e5      	bne.n	8003826 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2220      	movs	r2, #32
 800385e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2220      	movs	r2, #32
 8003864:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e067      	b.n	8003942 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b00      	cmp	r3, #0
 800387e:	d04f      	beq.n	8003920 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800388a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800388e:	d147      	bne.n	8003920 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003898:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a2:	e853 3f00 	ldrex	r3, [r3]
 80038a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	461a      	mov	r2, r3
 80038b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038b8:	637b      	str	r3, [r7, #52]	; 0x34
 80038ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038c0:	e841 2300 	strex	r3, r2, [r1]
 80038c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80038c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1e6      	bne.n	800389a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	3308      	adds	r3, #8
 80038d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	e853 3f00 	ldrex	r3, [r3]
 80038da:	613b      	str	r3, [r7, #16]
   return(result);
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	f023 0301 	bic.w	r3, r3, #1
 80038e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	3308      	adds	r3, #8
 80038ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80038ec:	623a      	str	r2, [r7, #32]
 80038ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f0:	69f9      	ldr	r1, [r7, #28]
 80038f2:	6a3a      	ldr	r2, [r7, #32]
 80038f4:	e841 2300 	strex	r3, r2, [r1]
 80038f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1e5      	bne.n	80038cc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2220      	movs	r2, #32
 8003904:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2220      	movs	r2, #32
 800390a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2220      	movs	r2, #32
 8003910:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e010      	b.n	8003942 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	69da      	ldr	r2, [r3, #28]
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	4013      	ands	r3, r2
 800392a:	68ba      	ldr	r2, [r7, #8]
 800392c:	429a      	cmp	r2, r3
 800392e:	bf0c      	ite	eq
 8003930:	2301      	moveq	r3, #1
 8003932:	2300      	movne	r3, #0
 8003934:	b2db      	uxtb	r3, r3
 8003936:	461a      	mov	r2, r3
 8003938:	79fb      	ldrb	r3, [r7, #7]
 800393a:	429a      	cmp	r2, r3
 800393c:	f43f af4a 	beq.w	80037d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3770      	adds	r7, #112	; 0x70
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
	...

0800394c <__errno>:
 800394c:	4b01      	ldr	r3, [pc, #4]	; (8003954 <__errno+0x8>)
 800394e:	6818      	ldr	r0, [r3, #0]
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	2000000c 	.word	0x2000000c

08003958 <__libc_init_array>:
 8003958:	b570      	push	{r4, r5, r6, lr}
 800395a:	4d0d      	ldr	r5, [pc, #52]	; (8003990 <__libc_init_array+0x38>)
 800395c:	4c0d      	ldr	r4, [pc, #52]	; (8003994 <__libc_init_array+0x3c>)
 800395e:	1b64      	subs	r4, r4, r5
 8003960:	10a4      	asrs	r4, r4, #2
 8003962:	2600      	movs	r6, #0
 8003964:	42a6      	cmp	r6, r4
 8003966:	d109      	bne.n	800397c <__libc_init_array+0x24>
 8003968:	4d0b      	ldr	r5, [pc, #44]	; (8003998 <__libc_init_array+0x40>)
 800396a:	4c0c      	ldr	r4, [pc, #48]	; (800399c <__libc_init_array+0x44>)
 800396c:	f000 fca2 	bl	80042b4 <_init>
 8003970:	1b64      	subs	r4, r4, r5
 8003972:	10a4      	asrs	r4, r4, #2
 8003974:	2600      	movs	r6, #0
 8003976:	42a6      	cmp	r6, r4
 8003978:	d105      	bne.n	8003986 <__libc_init_array+0x2e>
 800397a:	bd70      	pop	{r4, r5, r6, pc}
 800397c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003980:	4798      	blx	r3
 8003982:	3601      	adds	r6, #1
 8003984:	e7ee      	b.n	8003964 <__libc_init_array+0xc>
 8003986:	f855 3b04 	ldr.w	r3, [r5], #4
 800398a:	4798      	blx	r3
 800398c:	3601      	adds	r6, #1
 800398e:	e7f2      	b.n	8003976 <__libc_init_array+0x1e>
 8003990:	08004360 	.word	0x08004360
 8003994:	08004360 	.word	0x08004360
 8003998:	08004360 	.word	0x08004360
 800399c:	08004364 	.word	0x08004364

080039a0 <memset>:
 80039a0:	4402      	add	r2, r0
 80039a2:	4603      	mov	r3, r0
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d100      	bne.n	80039aa <memset+0xa>
 80039a8:	4770      	bx	lr
 80039aa:	f803 1b01 	strb.w	r1, [r3], #1
 80039ae:	e7f9      	b.n	80039a4 <memset+0x4>

080039b0 <sniprintf>:
 80039b0:	b40c      	push	{r2, r3}
 80039b2:	b530      	push	{r4, r5, lr}
 80039b4:	4b17      	ldr	r3, [pc, #92]	; (8003a14 <sniprintf+0x64>)
 80039b6:	1e0c      	subs	r4, r1, #0
 80039b8:	681d      	ldr	r5, [r3, #0]
 80039ba:	b09d      	sub	sp, #116	; 0x74
 80039bc:	da08      	bge.n	80039d0 <sniprintf+0x20>
 80039be:	238b      	movs	r3, #139	; 0x8b
 80039c0:	602b      	str	r3, [r5, #0]
 80039c2:	f04f 30ff 	mov.w	r0, #4294967295
 80039c6:	b01d      	add	sp, #116	; 0x74
 80039c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80039cc:	b002      	add	sp, #8
 80039ce:	4770      	bx	lr
 80039d0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80039d4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80039d8:	bf14      	ite	ne
 80039da:	f104 33ff 	addne.w	r3, r4, #4294967295
 80039de:	4623      	moveq	r3, r4
 80039e0:	9304      	str	r3, [sp, #16]
 80039e2:	9307      	str	r3, [sp, #28]
 80039e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039e8:	9002      	str	r0, [sp, #8]
 80039ea:	9006      	str	r0, [sp, #24]
 80039ec:	f8ad 3016 	strh.w	r3, [sp, #22]
 80039f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80039f2:	ab21      	add	r3, sp, #132	; 0x84
 80039f4:	a902      	add	r1, sp, #8
 80039f6:	4628      	mov	r0, r5
 80039f8:	9301      	str	r3, [sp, #4]
 80039fa:	f000 f869 	bl	8003ad0 <_svfiprintf_r>
 80039fe:	1c43      	adds	r3, r0, #1
 8003a00:	bfbc      	itt	lt
 8003a02:	238b      	movlt	r3, #139	; 0x8b
 8003a04:	602b      	strlt	r3, [r5, #0]
 8003a06:	2c00      	cmp	r4, #0
 8003a08:	d0dd      	beq.n	80039c6 <sniprintf+0x16>
 8003a0a:	9b02      	ldr	r3, [sp, #8]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	701a      	strb	r2, [r3, #0]
 8003a10:	e7d9      	b.n	80039c6 <sniprintf+0x16>
 8003a12:	bf00      	nop
 8003a14:	2000000c 	.word	0x2000000c

08003a18 <__ssputs_r>:
 8003a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a1c:	688e      	ldr	r6, [r1, #8]
 8003a1e:	429e      	cmp	r6, r3
 8003a20:	4682      	mov	sl, r0
 8003a22:	460c      	mov	r4, r1
 8003a24:	4690      	mov	r8, r2
 8003a26:	461f      	mov	r7, r3
 8003a28:	d838      	bhi.n	8003a9c <__ssputs_r+0x84>
 8003a2a:	898a      	ldrh	r2, [r1, #12]
 8003a2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003a30:	d032      	beq.n	8003a98 <__ssputs_r+0x80>
 8003a32:	6825      	ldr	r5, [r4, #0]
 8003a34:	6909      	ldr	r1, [r1, #16]
 8003a36:	eba5 0901 	sub.w	r9, r5, r1
 8003a3a:	6965      	ldr	r5, [r4, #20]
 8003a3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a44:	3301      	adds	r3, #1
 8003a46:	444b      	add	r3, r9
 8003a48:	106d      	asrs	r5, r5, #1
 8003a4a:	429d      	cmp	r5, r3
 8003a4c:	bf38      	it	cc
 8003a4e:	461d      	movcc	r5, r3
 8003a50:	0553      	lsls	r3, r2, #21
 8003a52:	d531      	bpl.n	8003ab8 <__ssputs_r+0xa0>
 8003a54:	4629      	mov	r1, r5
 8003a56:	f000 fb63 	bl	8004120 <_malloc_r>
 8003a5a:	4606      	mov	r6, r0
 8003a5c:	b950      	cbnz	r0, 8003a74 <__ssputs_r+0x5c>
 8003a5e:	230c      	movs	r3, #12
 8003a60:	f8ca 3000 	str.w	r3, [sl]
 8003a64:	89a3      	ldrh	r3, [r4, #12]
 8003a66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a6a:	81a3      	strh	r3, [r4, #12]
 8003a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a74:	6921      	ldr	r1, [r4, #16]
 8003a76:	464a      	mov	r2, r9
 8003a78:	f000 fabe 	bl	8003ff8 <memcpy>
 8003a7c:	89a3      	ldrh	r3, [r4, #12]
 8003a7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003a82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a86:	81a3      	strh	r3, [r4, #12]
 8003a88:	6126      	str	r6, [r4, #16]
 8003a8a:	6165      	str	r5, [r4, #20]
 8003a8c:	444e      	add	r6, r9
 8003a8e:	eba5 0509 	sub.w	r5, r5, r9
 8003a92:	6026      	str	r6, [r4, #0]
 8003a94:	60a5      	str	r5, [r4, #8]
 8003a96:	463e      	mov	r6, r7
 8003a98:	42be      	cmp	r6, r7
 8003a9a:	d900      	bls.n	8003a9e <__ssputs_r+0x86>
 8003a9c:	463e      	mov	r6, r7
 8003a9e:	6820      	ldr	r0, [r4, #0]
 8003aa0:	4632      	mov	r2, r6
 8003aa2:	4641      	mov	r1, r8
 8003aa4:	f000 fab6 	bl	8004014 <memmove>
 8003aa8:	68a3      	ldr	r3, [r4, #8]
 8003aaa:	1b9b      	subs	r3, r3, r6
 8003aac:	60a3      	str	r3, [r4, #8]
 8003aae:	6823      	ldr	r3, [r4, #0]
 8003ab0:	4433      	add	r3, r6
 8003ab2:	6023      	str	r3, [r4, #0]
 8003ab4:	2000      	movs	r0, #0
 8003ab6:	e7db      	b.n	8003a70 <__ssputs_r+0x58>
 8003ab8:	462a      	mov	r2, r5
 8003aba:	f000 fba5 	bl	8004208 <_realloc_r>
 8003abe:	4606      	mov	r6, r0
 8003ac0:	2800      	cmp	r0, #0
 8003ac2:	d1e1      	bne.n	8003a88 <__ssputs_r+0x70>
 8003ac4:	6921      	ldr	r1, [r4, #16]
 8003ac6:	4650      	mov	r0, sl
 8003ac8:	f000 fabe 	bl	8004048 <_free_r>
 8003acc:	e7c7      	b.n	8003a5e <__ssputs_r+0x46>
	...

08003ad0 <_svfiprintf_r>:
 8003ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ad4:	4698      	mov	r8, r3
 8003ad6:	898b      	ldrh	r3, [r1, #12]
 8003ad8:	061b      	lsls	r3, r3, #24
 8003ada:	b09d      	sub	sp, #116	; 0x74
 8003adc:	4607      	mov	r7, r0
 8003ade:	460d      	mov	r5, r1
 8003ae0:	4614      	mov	r4, r2
 8003ae2:	d50e      	bpl.n	8003b02 <_svfiprintf_r+0x32>
 8003ae4:	690b      	ldr	r3, [r1, #16]
 8003ae6:	b963      	cbnz	r3, 8003b02 <_svfiprintf_r+0x32>
 8003ae8:	2140      	movs	r1, #64	; 0x40
 8003aea:	f000 fb19 	bl	8004120 <_malloc_r>
 8003aee:	6028      	str	r0, [r5, #0]
 8003af0:	6128      	str	r0, [r5, #16]
 8003af2:	b920      	cbnz	r0, 8003afe <_svfiprintf_r+0x2e>
 8003af4:	230c      	movs	r3, #12
 8003af6:	603b      	str	r3, [r7, #0]
 8003af8:	f04f 30ff 	mov.w	r0, #4294967295
 8003afc:	e0d1      	b.n	8003ca2 <_svfiprintf_r+0x1d2>
 8003afe:	2340      	movs	r3, #64	; 0x40
 8003b00:	616b      	str	r3, [r5, #20]
 8003b02:	2300      	movs	r3, #0
 8003b04:	9309      	str	r3, [sp, #36]	; 0x24
 8003b06:	2320      	movs	r3, #32
 8003b08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b10:	2330      	movs	r3, #48	; 0x30
 8003b12:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003cbc <_svfiprintf_r+0x1ec>
 8003b16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b1a:	f04f 0901 	mov.w	r9, #1
 8003b1e:	4623      	mov	r3, r4
 8003b20:	469a      	mov	sl, r3
 8003b22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b26:	b10a      	cbz	r2, 8003b2c <_svfiprintf_r+0x5c>
 8003b28:	2a25      	cmp	r2, #37	; 0x25
 8003b2a:	d1f9      	bne.n	8003b20 <_svfiprintf_r+0x50>
 8003b2c:	ebba 0b04 	subs.w	fp, sl, r4
 8003b30:	d00b      	beq.n	8003b4a <_svfiprintf_r+0x7a>
 8003b32:	465b      	mov	r3, fp
 8003b34:	4622      	mov	r2, r4
 8003b36:	4629      	mov	r1, r5
 8003b38:	4638      	mov	r0, r7
 8003b3a:	f7ff ff6d 	bl	8003a18 <__ssputs_r>
 8003b3e:	3001      	adds	r0, #1
 8003b40:	f000 80aa 	beq.w	8003c98 <_svfiprintf_r+0x1c8>
 8003b44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b46:	445a      	add	r2, fp
 8003b48:	9209      	str	r2, [sp, #36]	; 0x24
 8003b4a:	f89a 3000 	ldrb.w	r3, [sl]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f000 80a2 	beq.w	8003c98 <_svfiprintf_r+0x1c8>
 8003b54:	2300      	movs	r3, #0
 8003b56:	f04f 32ff 	mov.w	r2, #4294967295
 8003b5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b5e:	f10a 0a01 	add.w	sl, sl, #1
 8003b62:	9304      	str	r3, [sp, #16]
 8003b64:	9307      	str	r3, [sp, #28]
 8003b66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b6a:	931a      	str	r3, [sp, #104]	; 0x68
 8003b6c:	4654      	mov	r4, sl
 8003b6e:	2205      	movs	r2, #5
 8003b70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b74:	4851      	ldr	r0, [pc, #324]	; (8003cbc <_svfiprintf_r+0x1ec>)
 8003b76:	f7fc fb33 	bl	80001e0 <memchr>
 8003b7a:	9a04      	ldr	r2, [sp, #16]
 8003b7c:	b9d8      	cbnz	r0, 8003bb6 <_svfiprintf_r+0xe6>
 8003b7e:	06d0      	lsls	r0, r2, #27
 8003b80:	bf44      	itt	mi
 8003b82:	2320      	movmi	r3, #32
 8003b84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b88:	0711      	lsls	r1, r2, #28
 8003b8a:	bf44      	itt	mi
 8003b8c:	232b      	movmi	r3, #43	; 0x2b
 8003b8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b92:	f89a 3000 	ldrb.w	r3, [sl]
 8003b96:	2b2a      	cmp	r3, #42	; 0x2a
 8003b98:	d015      	beq.n	8003bc6 <_svfiprintf_r+0xf6>
 8003b9a:	9a07      	ldr	r2, [sp, #28]
 8003b9c:	4654      	mov	r4, sl
 8003b9e:	2000      	movs	r0, #0
 8003ba0:	f04f 0c0a 	mov.w	ip, #10
 8003ba4:	4621      	mov	r1, r4
 8003ba6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003baa:	3b30      	subs	r3, #48	; 0x30
 8003bac:	2b09      	cmp	r3, #9
 8003bae:	d94e      	bls.n	8003c4e <_svfiprintf_r+0x17e>
 8003bb0:	b1b0      	cbz	r0, 8003be0 <_svfiprintf_r+0x110>
 8003bb2:	9207      	str	r2, [sp, #28]
 8003bb4:	e014      	b.n	8003be0 <_svfiprintf_r+0x110>
 8003bb6:	eba0 0308 	sub.w	r3, r0, r8
 8003bba:	fa09 f303 	lsl.w	r3, r9, r3
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	9304      	str	r3, [sp, #16]
 8003bc2:	46a2      	mov	sl, r4
 8003bc4:	e7d2      	b.n	8003b6c <_svfiprintf_r+0x9c>
 8003bc6:	9b03      	ldr	r3, [sp, #12]
 8003bc8:	1d19      	adds	r1, r3, #4
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	9103      	str	r1, [sp, #12]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	bfbb      	ittet	lt
 8003bd2:	425b      	neglt	r3, r3
 8003bd4:	f042 0202 	orrlt.w	r2, r2, #2
 8003bd8:	9307      	strge	r3, [sp, #28]
 8003bda:	9307      	strlt	r3, [sp, #28]
 8003bdc:	bfb8      	it	lt
 8003bde:	9204      	strlt	r2, [sp, #16]
 8003be0:	7823      	ldrb	r3, [r4, #0]
 8003be2:	2b2e      	cmp	r3, #46	; 0x2e
 8003be4:	d10c      	bne.n	8003c00 <_svfiprintf_r+0x130>
 8003be6:	7863      	ldrb	r3, [r4, #1]
 8003be8:	2b2a      	cmp	r3, #42	; 0x2a
 8003bea:	d135      	bne.n	8003c58 <_svfiprintf_r+0x188>
 8003bec:	9b03      	ldr	r3, [sp, #12]
 8003bee:	1d1a      	adds	r2, r3, #4
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	9203      	str	r2, [sp, #12]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	bfb8      	it	lt
 8003bf8:	f04f 33ff 	movlt.w	r3, #4294967295
 8003bfc:	3402      	adds	r4, #2
 8003bfe:	9305      	str	r3, [sp, #20]
 8003c00:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003ccc <_svfiprintf_r+0x1fc>
 8003c04:	7821      	ldrb	r1, [r4, #0]
 8003c06:	2203      	movs	r2, #3
 8003c08:	4650      	mov	r0, sl
 8003c0a:	f7fc fae9 	bl	80001e0 <memchr>
 8003c0e:	b140      	cbz	r0, 8003c22 <_svfiprintf_r+0x152>
 8003c10:	2340      	movs	r3, #64	; 0x40
 8003c12:	eba0 000a 	sub.w	r0, r0, sl
 8003c16:	fa03 f000 	lsl.w	r0, r3, r0
 8003c1a:	9b04      	ldr	r3, [sp, #16]
 8003c1c:	4303      	orrs	r3, r0
 8003c1e:	3401      	adds	r4, #1
 8003c20:	9304      	str	r3, [sp, #16]
 8003c22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c26:	4826      	ldr	r0, [pc, #152]	; (8003cc0 <_svfiprintf_r+0x1f0>)
 8003c28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c2c:	2206      	movs	r2, #6
 8003c2e:	f7fc fad7 	bl	80001e0 <memchr>
 8003c32:	2800      	cmp	r0, #0
 8003c34:	d038      	beq.n	8003ca8 <_svfiprintf_r+0x1d8>
 8003c36:	4b23      	ldr	r3, [pc, #140]	; (8003cc4 <_svfiprintf_r+0x1f4>)
 8003c38:	bb1b      	cbnz	r3, 8003c82 <_svfiprintf_r+0x1b2>
 8003c3a:	9b03      	ldr	r3, [sp, #12]
 8003c3c:	3307      	adds	r3, #7
 8003c3e:	f023 0307 	bic.w	r3, r3, #7
 8003c42:	3308      	adds	r3, #8
 8003c44:	9303      	str	r3, [sp, #12]
 8003c46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c48:	4433      	add	r3, r6
 8003c4a:	9309      	str	r3, [sp, #36]	; 0x24
 8003c4c:	e767      	b.n	8003b1e <_svfiprintf_r+0x4e>
 8003c4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c52:	460c      	mov	r4, r1
 8003c54:	2001      	movs	r0, #1
 8003c56:	e7a5      	b.n	8003ba4 <_svfiprintf_r+0xd4>
 8003c58:	2300      	movs	r3, #0
 8003c5a:	3401      	adds	r4, #1
 8003c5c:	9305      	str	r3, [sp, #20]
 8003c5e:	4619      	mov	r1, r3
 8003c60:	f04f 0c0a 	mov.w	ip, #10
 8003c64:	4620      	mov	r0, r4
 8003c66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c6a:	3a30      	subs	r2, #48	; 0x30
 8003c6c:	2a09      	cmp	r2, #9
 8003c6e:	d903      	bls.n	8003c78 <_svfiprintf_r+0x1a8>
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d0c5      	beq.n	8003c00 <_svfiprintf_r+0x130>
 8003c74:	9105      	str	r1, [sp, #20]
 8003c76:	e7c3      	b.n	8003c00 <_svfiprintf_r+0x130>
 8003c78:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c7c:	4604      	mov	r4, r0
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e7f0      	b.n	8003c64 <_svfiprintf_r+0x194>
 8003c82:	ab03      	add	r3, sp, #12
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	462a      	mov	r2, r5
 8003c88:	4b0f      	ldr	r3, [pc, #60]	; (8003cc8 <_svfiprintf_r+0x1f8>)
 8003c8a:	a904      	add	r1, sp, #16
 8003c8c:	4638      	mov	r0, r7
 8003c8e:	f3af 8000 	nop.w
 8003c92:	1c42      	adds	r2, r0, #1
 8003c94:	4606      	mov	r6, r0
 8003c96:	d1d6      	bne.n	8003c46 <_svfiprintf_r+0x176>
 8003c98:	89ab      	ldrh	r3, [r5, #12]
 8003c9a:	065b      	lsls	r3, r3, #25
 8003c9c:	f53f af2c 	bmi.w	8003af8 <_svfiprintf_r+0x28>
 8003ca0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ca2:	b01d      	add	sp, #116	; 0x74
 8003ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ca8:	ab03      	add	r3, sp, #12
 8003caa:	9300      	str	r3, [sp, #0]
 8003cac:	462a      	mov	r2, r5
 8003cae:	4b06      	ldr	r3, [pc, #24]	; (8003cc8 <_svfiprintf_r+0x1f8>)
 8003cb0:	a904      	add	r1, sp, #16
 8003cb2:	4638      	mov	r0, r7
 8003cb4:	f000 f87a 	bl	8003dac <_printf_i>
 8003cb8:	e7eb      	b.n	8003c92 <_svfiprintf_r+0x1c2>
 8003cba:	bf00      	nop
 8003cbc:	08004324 	.word	0x08004324
 8003cc0:	0800432e 	.word	0x0800432e
 8003cc4:	00000000 	.word	0x00000000
 8003cc8:	08003a19 	.word	0x08003a19
 8003ccc:	0800432a 	.word	0x0800432a

08003cd0 <_printf_common>:
 8003cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cd4:	4616      	mov	r6, r2
 8003cd6:	4699      	mov	r9, r3
 8003cd8:	688a      	ldr	r2, [r1, #8]
 8003cda:	690b      	ldr	r3, [r1, #16]
 8003cdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	bfb8      	it	lt
 8003ce4:	4613      	movlt	r3, r2
 8003ce6:	6033      	str	r3, [r6, #0]
 8003ce8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003cec:	4607      	mov	r7, r0
 8003cee:	460c      	mov	r4, r1
 8003cf0:	b10a      	cbz	r2, 8003cf6 <_printf_common+0x26>
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	6033      	str	r3, [r6, #0]
 8003cf6:	6823      	ldr	r3, [r4, #0]
 8003cf8:	0699      	lsls	r1, r3, #26
 8003cfa:	bf42      	ittt	mi
 8003cfc:	6833      	ldrmi	r3, [r6, #0]
 8003cfe:	3302      	addmi	r3, #2
 8003d00:	6033      	strmi	r3, [r6, #0]
 8003d02:	6825      	ldr	r5, [r4, #0]
 8003d04:	f015 0506 	ands.w	r5, r5, #6
 8003d08:	d106      	bne.n	8003d18 <_printf_common+0x48>
 8003d0a:	f104 0a19 	add.w	sl, r4, #25
 8003d0e:	68e3      	ldr	r3, [r4, #12]
 8003d10:	6832      	ldr	r2, [r6, #0]
 8003d12:	1a9b      	subs	r3, r3, r2
 8003d14:	42ab      	cmp	r3, r5
 8003d16:	dc26      	bgt.n	8003d66 <_printf_common+0x96>
 8003d18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d1c:	1e13      	subs	r3, r2, #0
 8003d1e:	6822      	ldr	r2, [r4, #0]
 8003d20:	bf18      	it	ne
 8003d22:	2301      	movne	r3, #1
 8003d24:	0692      	lsls	r2, r2, #26
 8003d26:	d42b      	bmi.n	8003d80 <_printf_common+0xb0>
 8003d28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d2c:	4649      	mov	r1, r9
 8003d2e:	4638      	mov	r0, r7
 8003d30:	47c0      	blx	r8
 8003d32:	3001      	adds	r0, #1
 8003d34:	d01e      	beq.n	8003d74 <_printf_common+0xa4>
 8003d36:	6823      	ldr	r3, [r4, #0]
 8003d38:	68e5      	ldr	r5, [r4, #12]
 8003d3a:	6832      	ldr	r2, [r6, #0]
 8003d3c:	f003 0306 	and.w	r3, r3, #6
 8003d40:	2b04      	cmp	r3, #4
 8003d42:	bf08      	it	eq
 8003d44:	1aad      	subeq	r5, r5, r2
 8003d46:	68a3      	ldr	r3, [r4, #8]
 8003d48:	6922      	ldr	r2, [r4, #16]
 8003d4a:	bf0c      	ite	eq
 8003d4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d50:	2500      	movne	r5, #0
 8003d52:	4293      	cmp	r3, r2
 8003d54:	bfc4      	itt	gt
 8003d56:	1a9b      	subgt	r3, r3, r2
 8003d58:	18ed      	addgt	r5, r5, r3
 8003d5a:	2600      	movs	r6, #0
 8003d5c:	341a      	adds	r4, #26
 8003d5e:	42b5      	cmp	r5, r6
 8003d60:	d11a      	bne.n	8003d98 <_printf_common+0xc8>
 8003d62:	2000      	movs	r0, #0
 8003d64:	e008      	b.n	8003d78 <_printf_common+0xa8>
 8003d66:	2301      	movs	r3, #1
 8003d68:	4652      	mov	r2, sl
 8003d6a:	4649      	mov	r1, r9
 8003d6c:	4638      	mov	r0, r7
 8003d6e:	47c0      	blx	r8
 8003d70:	3001      	adds	r0, #1
 8003d72:	d103      	bne.n	8003d7c <_printf_common+0xac>
 8003d74:	f04f 30ff 	mov.w	r0, #4294967295
 8003d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d7c:	3501      	adds	r5, #1
 8003d7e:	e7c6      	b.n	8003d0e <_printf_common+0x3e>
 8003d80:	18e1      	adds	r1, r4, r3
 8003d82:	1c5a      	adds	r2, r3, #1
 8003d84:	2030      	movs	r0, #48	; 0x30
 8003d86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d8a:	4422      	add	r2, r4
 8003d8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d94:	3302      	adds	r3, #2
 8003d96:	e7c7      	b.n	8003d28 <_printf_common+0x58>
 8003d98:	2301      	movs	r3, #1
 8003d9a:	4622      	mov	r2, r4
 8003d9c:	4649      	mov	r1, r9
 8003d9e:	4638      	mov	r0, r7
 8003da0:	47c0      	blx	r8
 8003da2:	3001      	adds	r0, #1
 8003da4:	d0e6      	beq.n	8003d74 <_printf_common+0xa4>
 8003da6:	3601      	adds	r6, #1
 8003da8:	e7d9      	b.n	8003d5e <_printf_common+0x8e>
	...

08003dac <_printf_i>:
 8003dac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003db0:	7e0f      	ldrb	r7, [r1, #24]
 8003db2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003db4:	2f78      	cmp	r7, #120	; 0x78
 8003db6:	4691      	mov	r9, r2
 8003db8:	4680      	mov	r8, r0
 8003dba:	460c      	mov	r4, r1
 8003dbc:	469a      	mov	sl, r3
 8003dbe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003dc2:	d807      	bhi.n	8003dd4 <_printf_i+0x28>
 8003dc4:	2f62      	cmp	r7, #98	; 0x62
 8003dc6:	d80a      	bhi.n	8003dde <_printf_i+0x32>
 8003dc8:	2f00      	cmp	r7, #0
 8003dca:	f000 80d8 	beq.w	8003f7e <_printf_i+0x1d2>
 8003dce:	2f58      	cmp	r7, #88	; 0x58
 8003dd0:	f000 80a3 	beq.w	8003f1a <_printf_i+0x16e>
 8003dd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003dd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ddc:	e03a      	b.n	8003e54 <_printf_i+0xa8>
 8003dde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003de2:	2b15      	cmp	r3, #21
 8003de4:	d8f6      	bhi.n	8003dd4 <_printf_i+0x28>
 8003de6:	a101      	add	r1, pc, #4	; (adr r1, 8003dec <_printf_i+0x40>)
 8003de8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003dec:	08003e45 	.word	0x08003e45
 8003df0:	08003e59 	.word	0x08003e59
 8003df4:	08003dd5 	.word	0x08003dd5
 8003df8:	08003dd5 	.word	0x08003dd5
 8003dfc:	08003dd5 	.word	0x08003dd5
 8003e00:	08003dd5 	.word	0x08003dd5
 8003e04:	08003e59 	.word	0x08003e59
 8003e08:	08003dd5 	.word	0x08003dd5
 8003e0c:	08003dd5 	.word	0x08003dd5
 8003e10:	08003dd5 	.word	0x08003dd5
 8003e14:	08003dd5 	.word	0x08003dd5
 8003e18:	08003f65 	.word	0x08003f65
 8003e1c:	08003e89 	.word	0x08003e89
 8003e20:	08003f47 	.word	0x08003f47
 8003e24:	08003dd5 	.word	0x08003dd5
 8003e28:	08003dd5 	.word	0x08003dd5
 8003e2c:	08003f87 	.word	0x08003f87
 8003e30:	08003dd5 	.word	0x08003dd5
 8003e34:	08003e89 	.word	0x08003e89
 8003e38:	08003dd5 	.word	0x08003dd5
 8003e3c:	08003dd5 	.word	0x08003dd5
 8003e40:	08003f4f 	.word	0x08003f4f
 8003e44:	682b      	ldr	r3, [r5, #0]
 8003e46:	1d1a      	adds	r2, r3, #4
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	602a      	str	r2, [r5, #0]
 8003e4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e54:	2301      	movs	r3, #1
 8003e56:	e0a3      	b.n	8003fa0 <_printf_i+0x1f4>
 8003e58:	6820      	ldr	r0, [r4, #0]
 8003e5a:	6829      	ldr	r1, [r5, #0]
 8003e5c:	0606      	lsls	r6, r0, #24
 8003e5e:	f101 0304 	add.w	r3, r1, #4
 8003e62:	d50a      	bpl.n	8003e7a <_printf_i+0xce>
 8003e64:	680e      	ldr	r6, [r1, #0]
 8003e66:	602b      	str	r3, [r5, #0]
 8003e68:	2e00      	cmp	r6, #0
 8003e6a:	da03      	bge.n	8003e74 <_printf_i+0xc8>
 8003e6c:	232d      	movs	r3, #45	; 0x2d
 8003e6e:	4276      	negs	r6, r6
 8003e70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e74:	485e      	ldr	r0, [pc, #376]	; (8003ff0 <_printf_i+0x244>)
 8003e76:	230a      	movs	r3, #10
 8003e78:	e019      	b.n	8003eae <_printf_i+0x102>
 8003e7a:	680e      	ldr	r6, [r1, #0]
 8003e7c:	602b      	str	r3, [r5, #0]
 8003e7e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003e82:	bf18      	it	ne
 8003e84:	b236      	sxthne	r6, r6
 8003e86:	e7ef      	b.n	8003e68 <_printf_i+0xbc>
 8003e88:	682b      	ldr	r3, [r5, #0]
 8003e8a:	6820      	ldr	r0, [r4, #0]
 8003e8c:	1d19      	adds	r1, r3, #4
 8003e8e:	6029      	str	r1, [r5, #0]
 8003e90:	0601      	lsls	r1, r0, #24
 8003e92:	d501      	bpl.n	8003e98 <_printf_i+0xec>
 8003e94:	681e      	ldr	r6, [r3, #0]
 8003e96:	e002      	b.n	8003e9e <_printf_i+0xf2>
 8003e98:	0646      	lsls	r6, r0, #25
 8003e9a:	d5fb      	bpl.n	8003e94 <_printf_i+0xe8>
 8003e9c:	881e      	ldrh	r6, [r3, #0]
 8003e9e:	4854      	ldr	r0, [pc, #336]	; (8003ff0 <_printf_i+0x244>)
 8003ea0:	2f6f      	cmp	r7, #111	; 0x6f
 8003ea2:	bf0c      	ite	eq
 8003ea4:	2308      	moveq	r3, #8
 8003ea6:	230a      	movne	r3, #10
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003eae:	6865      	ldr	r5, [r4, #4]
 8003eb0:	60a5      	str	r5, [r4, #8]
 8003eb2:	2d00      	cmp	r5, #0
 8003eb4:	bfa2      	ittt	ge
 8003eb6:	6821      	ldrge	r1, [r4, #0]
 8003eb8:	f021 0104 	bicge.w	r1, r1, #4
 8003ebc:	6021      	strge	r1, [r4, #0]
 8003ebe:	b90e      	cbnz	r6, 8003ec4 <_printf_i+0x118>
 8003ec0:	2d00      	cmp	r5, #0
 8003ec2:	d04d      	beq.n	8003f60 <_printf_i+0x1b4>
 8003ec4:	4615      	mov	r5, r2
 8003ec6:	fbb6 f1f3 	udiv	r1, r6, r3
 8003eca:	fb03 6711 	mls	r7, r3, r1, r6
 8003ece:	5dc7      	ldrb	r7, [r0, r7]
 8003ed0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003ed4:	4637      	mov	r7, r6
 8003ed6:	42bb      	cmp	r3, r7
 8003ed8:	460e      	mov	r6, r1
 8003eda:	d9f4      	bls.n	8003ec6 <_printf_i+0x11a>
 8003edc:	2b08      	cmp	r3, #8
 8003ede:	d10b      	bne.n	8003ef8 <_printf_i+0x14c>
 8003ee0:	6823      	ldr	r3, [r4, #0]
 8003ee2:	07de      	lsls	r6, r3, #31
 8003ee4:	d508      	bpl.n	8003ef8 <_printf_i+0x14c>
 8003ee6:	6923      	ldr	r3, [r4, #16]
 8003ee8:	6861      	ldr	r1, [r4, #4]
 8003eea:	4299      	cmp	r1, r3
 8003eec:	bfde      	ittt	le
 8003eee:	2330      	movle	r3, #48	; 0x30
 8003ef0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ef4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003ef8:	1b52      	subs	r2, r2, r5
 8003efa:	6122      	str	r2, [r4, #16]
 8003efc:	f8cd a000 	str.w	sl, [sp]
 8003f00:	464b      	mov	r3, r9
 8003f02:	aa03      	add	r2, sp, #12
 8003f04:	4621      	mov	r1, r4
 8003f06:	4640      	mov	r0, r8
 8003f08:	f7ff fee2 	bl	8003cd0 <_printf_common>
 8003f0c:	3001      	adds	r0, #1
 8003f0e:	d14c      	bne.n	8003faa <_printf_i+0x1fe>
 8003f10:	f04f 30ff 	mov.w	r0, #4294967295
 8003f14:	b004      	add	sp, #16
 8003f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f1a:	4835      	ldr	r0, [pc, #212]	; (8003ff0 <_printf_i+0x244>)
 8003f1c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003f20:	6829      	ldr	r1, [r5, #0]
 8003f22:	6823      	ldr	r3, [r4, #0]
 8003f24:	f851 6b04 	ldr.w	r6, [r1], #4
 8003f28:	6029      	str	r1, [r5, #0]
 8003f2a:	061d      	lsls	r5, r3, #24
 8003f2c:	d514      	bpl.n	8003f58 <_printf_i+0x1ac>
 8003f2e:	07df      	lsls	r7, r3, #31
 8003f30:	bf44      	itt	mi
 8003f32:	f043 0320 	orrmi.w	r3, r3, #32
 8003f36:	6023      	strmi	r3, [r4, #0]
 8003f38:	b91e      	cbnz	r6, 8003f42 <_printf_i+0x196>
 8003f3a:	6823      	ldr	r3, [r4, #0]
 8003f3c:	f023 0320 	bic.w	r3, r3, #32
 8003f40:	6023      	str	r3, [r4, #0]
 8003f42:	2310      	movs	r3, #16
 8003f44:	e7b0      	b.n	8003ea8 <_printf_i+0xfc>
 8003f46:	6823      	ldr	r3, [r4, #0]
 8003f48:	f043 0320 	orr.w	r3, r3, #32
 8003f4c:	6023      	str	r3, [r4, #0]
 8003f4e:	2378      	movs	r3, #120	; 0x78
 8003f50:	4828      	ldr	r0, [pc, #160]	; (8003ff4 <_printf_i+0x248>)
 8003f52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f56:	e7e3      	b.n	8003f20 <_printf_i+0x174>
 8003f58:	0659      	lsls	r1, r3, #25
 8003f5a:	bf48      	it	mi
 8003f5c:	b2b6      	uxthmi	r6, r6
 8003f5e:	e7e6      	b.n	8003f2e <_printf_i+0x182>
 8003f60:	4615      	mov	r5, r2
 8003f62:	e7bb      	b.n	8003edc <_printf_i+0x130>
 8003f64:	682b      	ldr	r3, [r5, #0]
 8003f66:	6826      	ldr	r6, [r4, #0]
 8003f68:	6961      	ldr	r1, [r4, #20]
 8003f6a:	1d18      	adds	r0, r3, #4
 8003f6c:	6028      	str	r0, [r5, #0]
 8003f6e:	0635      	lsls	r5, r6, #24
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	d501      	bpl.n	8003f78 <_printf_i+0x1cc>
 8003f74:	6019      	str	r1, [r3, #0]
 8003f76:	e002      	b.n	8003f7e <_printf_i+0x1d2>
 8003f78:	0670      	lsls	r0, r6, #25
 8003f7a:	d5fb      	bpl.n	8003f74 <_printf_i+0x1c8>
 8003f7c:	8019      	strh	r1, [r3, #0]
 8003f7e:	2300      	movs	r3, #0
 8003f80:	6123      	str	r3, [r4, #16]
 8003f82:	4615      	mov	r5, r2
 8003f84:	e7ba      	b.n	8003efc <_printf_i+0x150>
 8003f86:	682b      	ldr	r3, [r5, #0]
 8003f88:	1d1a      	adds	r2, r3, #4
 8003f8a:	602a      	str	r2, [r5, #0]
 8003f8c:	681d      	ldr	r5, [r3, #0]
 8003f8e:	6862      	ldr	r2, [r4, #4]
 8003f90:	2100      	movs	r1, #0
 8003f92:	4628      	mov	r0, r5
 8003f94:	f7fc f924 	bl	80001e0 <memchr>
 8003f98:	b108      	cbz	r0, 8003f9e <_printf_i+0x1f2>
 8003f9a:	1b40      	subs	r0, r0, r5
 8003f9c:	6060      	str	r0, [r4, #4]
 8003f9e:	6863      	ldr	r3, [r4, #4]
 8003fa0:	6123      	str	r3, [r4, #16]
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fa8:	e7a8      	b.n	8003efc <_printf_i+0x150>
 8003faa:	6923      	ldr	r3, [r4, #16]
 8003fac:	462a      	mov	r2, r5
 8003fae:	4649      	mov	r1, r9
 8003fb0:	4640      	mov	r0, r8
 8003fb2:	47d0      	blx	sl
 8003fb4:	3001      	adds	r0, #1
 8003fb6:	d0ab      	beq.n	8003f10 <_printf_i+0x164>
 8003fb8:	6823      	ldr	r3, [r4, #0]
 8003fba:	079b      	lsls	r3, r3, #30
 8003fbc:	d413      	bmi.n	8003fe6 <_printf_i+0x23a>
 8003fbe:	68e0      	ldr	r0, [r4, #12]
 8003fc0:	9b03      	ldr	r3, [sp, #12]
 8003fc2:	4298      	cmp	r0, r3
 8003fc4:	bfb8      	it	lt
 8003fc6:	4618      	movlt	r0, r3
 8003fc8:	e7a4      	b.n	8003f14 <_printf_i+0x168>
 8003fca:	2301      	movs	r3, #1
 8003fcc:	4632      	mov	r2, r6
 8003fce:	4649      	mov	r1, r9
 8003fd0:	4640      	mov	r0, r8
 8003fd2:	47d0      	blx	sl
 8003fd4:	3001      	adds	r0, #1
 8003fd6:	d09b      	beq.n	8003f10 <_printf_i+0x164>
 8003fd8:	3501      	adds	r5, #1
 8003fda:	68e3      	ldr	r3, [r4, #12]
 8003fdc:	9903      	ldr	r1, [sp, #12]
 8003fde:	1a5b      	subs	r3, r3, r1
 8003fe0:	42ab      	cmp	r3, r5
 8003fe2:	dcf2      	bgt.n	8003fca <_printf_i+0x21e>
 8003fe4:	e7eb      	b.n	8003fbe <_printf_i+0x212>
 8003fe6:	2500      	movs	r5, #0
 8003fe8:	f104 0619 	add.w	r6, r4, #25
 8003fec:	e7f5      	b.n	8003fda <_printf_i+0x22e>
 8003fee:	bf00      	nop
 8003ff0:	08004335 	.word	0x08004335
 8003ff4:	08004346 	.word	0x08004346

08003ff8 <memcpy>:
 8003ff8:	440a      	add	r2, r1
 8003ffa:	4291      	cmp	r1, r2
 8003ffc:	f100 33ff 	add.w	r3, r0, #4294967295
 8004000:	d100      	bne.n	8004004 <memcpy+0xc>
 8004002:	4770      	bx	lr
 8004004:	b510      	push	{r4, lr}
 8004006:	f811 4b01 	ldrb.w	r4, [r1], #1
 800400a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800400e:	4291      	cmp	r1, r2
 8004010:	d1f9      	bne.n	8004006 <memcpy+0xe>
 8004012:	bd10      	pop	{r4, pc}

08004014 <memmove>:
 8004014:	4288      	cmp	r0, r1
 8004016:	b510      	push	{r4, lr}
 8004018:	eb01 0402 	add.w	r4, r1, r2
 800401c:	d902      	bls.n	8004024 <memmove+0x10>
 800401e:	4284      	cmp	r4, r0
 8004020:	4623      	mov	r3, r4
 8004022:	d807      	bhi.n	8004034 <memmove+0x20>
 8004024:	1e43      	subs	r3, r0, #1
 8004026:	42a1      	cmp	r1, r4
 8004028:	d008      	beq.n	800403c <memmove+0x28>
 800402a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800402e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004032:	e7f8      	b.n	8004026 <memmove+0x12>
 8004034:	4402      	add	r2, r0
 8004036:	4601      	mov	r1, r0
 8004038:	428a      	cmp	r2, r1
 800403a:	d100      	bne.n	800403e <memmove+0x2a>
 800403c:	bd10      	pop	{r4, pc}
 800403e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004042:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004046:	e7f7      	b.n	8004038 <memmove+0x24>

08004048 <_free_r>:
 8004048:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800404a:	2900      	cmp	r1, #0
 800404c:	d044      	beq.n	80040d8 <_free_r+0x90>
 800404e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004052:	9001      	str	r0, [sp, #4]
 8004054:	2b00      	cmp	r3, #0
 8004056:	f1a1 0404 	sub.w	r4, r1, #4
 800405a:	bfb8      	it	lt
 800405c:	18e4      	addlt	r4, r4, r3
 800405e:	f000 f913 	bl	8004288 <__malloc_lock>
 8004062:	4a1e      	ldr	r2, [pc, #120]	; (80040dc <_free_r+0x94>)
 8004064:	9801      	ldr	r0, [sp, #4]
 8004066:	6813      	ldr	r3, [r2, #0]
 8004068:	b933      	cbnz	r3, 8004078 <_free_r+0x30>
 800406a:	6063      	str	r3, [r4, #4]
 800406c:	6014      	str	r4, [r2, #0]
 800406e:	b003      	add	sp, #12
 8004070:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004074:	f000 b90e 	b.w	8004294 <__malloc_unlock>
 8004078:	42a3      	cmp	r3, r4
 800407a:	d908      	bls.n	800408e <_free_r+0x46>
 800407c:	6825      	ldr	r5, [r4, #0]
 800407e:	1961      	adds	r1, r4, r5
 8004080:	428b      	cmp	r3, r1
 8004082:	bf01      	itttt	eq
 8004084:	6819      	ldreq	r1, [r3, #0]
 8004086:	685b      	ldreq	r3, [r3, #4]
 8004088:	1949      	addeq	r1, r1, r5
 800408a:	6021      	streq	r1, [r4, #0]
 800408c:	e7ed      	b.n	800406a <_free_r+0x22>
 800408e:	461a      	mov	r2, r3
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	b10b      	cbz	r3, 8004098 <_free_r+0x50>
 8004094:	42a3      	cmp	r3, r4
 8004096:	d9fa      	bls.n	800408e <_free_r+0x46>
 8004098:	6811      	ldr	r1, [r2, #0]
 800409a:	1855      	adds	r5, r2, r1
 800409c:	42a5      	cmp	r5, r4
 800409e:	d10b      	bne.n	80040b8 <_free_r+0x70>
 80040a0:	6824      	ldr	r4, [r4, #0]
 80040a2:	4421      	add	r1, r4
 80040a4:	1854      	adds	r4, r2, r1
 80040a6:	42a3      	cmp	r3, r4
 80040a8:	6011      	str	r1, [r2, #0]
 80040aa:	d1e0      	bne.n	800406e <_free_r+0x26>
 80040ac:	681c      	ldr	r4, [r3, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	6053      	str	r3, [r2, #4]
 80040b2:	4421      	add	r1, r4
 80040b4:	6011      	str	r1, [r2, #0]
 80040b6:	e7da      	b.n	800406e <_free_r+0x26>
 80040b8:	d902      	bls.n	80040c0 <_free_r+0x78>
 80040ba:	230c      	movs	r3, #12
 80040bc:	6003      	str	r3, [r0, #0]
 80040be:	e7d6      	b.n	800406e <_free_r+0x26>
 80040c0:	6825      	ldr	r5, [r4, #0]
 80040c2:	1961      	adds	r1, r4, r5
 80040c4:	428b      	cmp	r3, r1
 80040c6:	bf04      	itt	eq
 80040c8:	6819      	ldreq	r1, [r3, #0]
 80040ca:	685b      	ldreq	r3, [r3, #4]
 80040cc:	6063      	str	r3, [r4, #4]
 80040ce:	bf04      	itt	eq
 80040d0:	1949      	addeq	r1, r1, r5
 80040d2:	6021      	streq	r1, [r4, #0]
 80040d4:	6054      	str	r4, [r2, #4]
 80040d6:	e7ca      	b.n	800406e <_free_r+0x26>
 80040d8:	b003      	add	sp, #12
 80040da:	bd30      	pop	{r4, r5, pc}
 80040dc:	20000170 	.word	0x20000170

080040e0 <sbrk_aligned>:
 80040e0:	b570      	push	{r4, r5, r6, lr}
 80040e2:	4e0e      	ldr	r6, [pc, #56]	; (800411c <sbrk_aligned+0x3c>)
 80040e4:	460c      	mov	r4, r1
 80040e6:	6831      	ldr	r1, [r6, #0]
 80040e8:	4605      	mov	r5, r0
 80040ea:	b911      	cbnz	r1, 80040f2 <sbrk_aligned+0x12>
 80040ec:	f000 f8bc 	bl	8004268 <_sbrk_r>
 80040f0:	6030      	str	r0, [r6, #0]
 80040f2:	4621      	mov	r1, r4
 80040f4:	4628      	mov	r0, r5
 80040f6:	f000 f8b7 	bl	8004268 <_sbrk_r>
 80040fa:	1c43      	adds	r3, r0, #1
 80040fc:	d00a      	beq.n	8004114 <sbrk_aligned+0x34>
 80040fe:	1cc4      	adds	r4, r0, #3
 8004100:	f024 0403 	bic.w	r4, r4, #3
 8004104:	42a0      	cmp	r0, r4
 8004106:	d007      	beq.n	8004118 <sbrk_aligned+0x38>
 8004108:	1a21      	subs	r1, r4, r0
 800410a:	4628      	mov	r0, r5
 800410c:	f000 f8ac 	bl	8004268 <_sbrk_r>
 8004110:	3001      	adds	r0, #1
 8004112:	d101      	bne.n	8004118 <sbrk_aligned+0x38>
 8004114:	f04f 34ff 	mov.w	r4, #4294967295
 8004118:	4620      	mov	r0, r4
 800411a:	bd70      	pop	{r4, r5, r6, pc}
 800411c:	20000174 	.word	0x20000174

08004120 <_malloc_r>:
 8004120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004124:	1ccd      	adds	r5, r1, #3
 8004126:	f025 0503 	bic.w	r5, r5, #3
 800412a:	3508      	adds	r5, #8
 800412c:	2d0c      	cmp	r5, #12
 800412e:	bf38      	it	cc
 8004130:	250c      	movcc	r5, #12
 8004132:	2d00      	cmp	r5, #0
 8004134:	4607      	mov	r7, r0
 8004136:	db01      	blt.n	800413c <_malloc_r+0x1c>
 8004138:	42a9      	cmp	r1, r5
 800413a:	d905      	bls.n	8004148 <_malloc_r+0x28>
 800413c:	230c      	movs	r3, #12
 800413e:	603b      	str	r3, [r7, #0]
 8004140:	2600      	movs	r6, #0
 8004142:	4630      	mov	r0, r6
 8004144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004148:	4e2e      	ldr	r6, [pc, #184]	; (8004204 <_malloc_r+0xe4>)
 800414a:	f000 f89d 	bl	8004288 <__malloc_lock>
 800414e:	6833      	ldr	r3, [r6, #0]
 8004150:	461c      	mov	r4, r3
 8004152:	bb34      	cbnz	r4, 80041a2 <_malloc_r+0x82>
 8004154:	4629      	mov	r1, r5
 8004156:	4638      	mov	r0, r7
 8004158:	f7ff ffc2 	bl	80040e0 <sbrk_aligned>
 800415c:	1c43      	adds	r3, r0, #1
 800415e:	4604      	mov	r4, r0
 8004160:	d14d      	bne.n	80041fe <_malloc_r+0xde>
 8004162:	6834      	ldr	r4, [r6, #0]
 8004164:	4626      	mov	r6, r4
 8004166:	2e00      	cmp	r6, #0
 8004168:	d140      	bne.n	80041ec <_malloc_r+0xcc>
 800416a:	6823      	ldr	r3, [r4, #0]
 800416c:	4631      	mov	r1, r6
 800416e:	4638      	mov	r0, r7
 8004170:	eb04 0803 	add.w	r8, r4, r3
 8004174:	f000 f878 	bl	8004268 <_sbrk_r>
 8004178:	4580      	cmp	r8, r0
 800417a:	d13a      	bne.n	80041f2 <_malloc_r+0xd2>
 800417c:	6821      	ldr	r1, [r4, #0]
 800417e:	3503      	adds	r5, #3
 8004180:	1a6d      	subs	r5, r5, r1
 8004182:	f025 0503 	bic.w	r5, r5, #3
 8004186:	3508      	adds	r5, #8
 8004188:	2d0c      	cmp	r5, #12
 800418a:	bf38      	it	cc
 800418c:	250c      	movcc	r5, #12
 800418e:	4629      	mov	r1, r5
 8004190:	4638      	mov	r0, r7
 8004192:	f7ff ffa5 	bl	80040e0 <sbrk_aligned>
 8004196:	3001      	adds	r0, #1
 8004198:	d02b      	beq.n	80041f2 <_malloc_r+0xd2>
 800419a:	6823      	ldr	r3, [r4, #0]
 800419c:	442b      	add	r3, r5
 800419e:	6023      	str	r3, [r4, #0]
 80041a0:	e00e      	b.n	80041c0 <_malloc_r+0xa0>
 80041a2:	6822      	ldr	r2, [r4, #0]
 80041a4:	1b52      	subs	r2, r2, r5
 80041a6:	d41e      	bmi.n	80041e6 <_malloc_r+0xc6>
 80041a8:	2a0b      	cmp	r2, #11
 80041aa:	d916      	bls.n	80041da <_malloc_r+0xba>
 80041ac:	1961      	adds	r1, r4, r5
 80041ae:	42a3      	cmp	r3, r4
 80041b0:	6025      	str	r5, [r4, #0]
 80041b2:	bf18      	it	ne
 80041b4:	6059      	strne	r1, [r3, #4]
 80041b6:	6863      	ldr	r3, [r4, #4]
 80041b8:	bf08      	it	eq
 80041ba:	6031      	streq	r1, [r6, #0]
 80041bc:	5162      	str	r2, [r4, r5]
 80041be:	604b      	str	r3, [r1, #4]
 80041c0:	4638      	mov	r0, r7
 80041c2:	f104 060b 	add.w	r6, r4, #11
 80041c6:	f000 f865 	bl	8004294 <__malloc_unlock>
 80041ca:	f026 0607 	bic.w	r6, r6, #7
 80041ce:	1d23      	adds	r3, r4, #4
 80041d0:	1af2      	subs	r2, r6, r3
 80041d2:	d0b6      	beq.n	8004142 <_malloc_r+0x22>
 80041d4:	1b9b      	subs	r3, r3, r6
 80041d6:	50a3      	str	r3, [r4, r2]
 80041d8:	e7b3      	b.n	8004142 <_malloc_r+0x22>
 80041da:	6862      	ldr	r2, [r4, #4]
 80041dc:	42a3      	cmp	r3, r4
 80041de:	bf0c      	ite	eq
 80041e0:	6032      	streq	r2, [r6, #0]
 80041e2:	605a      	strne	r2, [r3, #4]
 80041e4:	e7ec      	b.n	80041c0 <_malloc_r+0xa0>
 80041e6:	4623      	mov	r3, r4
 80041e8:	6864      	ldr	r4, [r4, #4]
 80041ea:	e7b2      	b.n	8004152 <_malloc_r+0x32>
 80041ec:	4634      	mov	r4, r6
 80041ee:	6876      	ldr	r6, [r6, #4]
 80041f0:	e7b9      	b.n	8004166 <_malloc_r+0x46>
 80041f2:	230c      	movs	r3, #12
 80041f4:	603b      	str	r3, [r7, #0]
 80041f6:	4638      	mov	r0, r7
 80041f8:	f000 f84c 	bl	8004294 <__malloc_unlock>
 80041fc:	e7a1      	b.n	8004142 <_malloc_r+0x22>
 80041fe:	6025      	str	r5, [r4, #0]
 8004200:	e7de      	b.n	80041c0 <_malloc_r+0xa0>
 8004202:	bf00      	nop
 8004204:	20000170 	.word	0x20000170

08004208 <_realloc_r>:
 8004208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800420c:	4680      	mov	r8, r0
 800420e:	4614      	mov	r4, r2
 8004210:	460e      	mov	r6, r1
 8004212:	b921      	cbnz	r1, 800421e <_realloc_r+0x16>
 8004214:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004218:	4611      	mov	r1, r2
 800421a:	f7ff bf81 	b.w	8004120 <_malloc_r>
 800421e:	b92a      	cbnz	r2, 800422c <_realloc_r+0x24>
 8004220:	f7ff ff12 	bl	8004048 <_free_r>
 8004224:	4625      	mov	r5, r4
 8004226:	4628      	mov	r0, r5
 8004228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800422c:	f000 f838 	bl	80042a0 <_malloc_usable_size_r>
 8004230:	4284      	cmp	r4, r0
 8004232:	4607      	mov	r7, r0
 8004234:	d802      	bhi.n	800423c <_realloc_r+0x34>
 8004236:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800423a:	d812      	bhi.n	8004262 <_realloc_r+0x5a>
 800423c:	4621      	mov	r1, r4
 800423e:	4640      	mov	r0, r8
 8004240:	f7ff ff6e 	bl	8004120 <_malloc_r>
 8004244:	4605      	mov	r5, r0
 8004246:	2800      	cmp	r0, #0
 8004248:	d0ed      	beq.n	8004226 <_realloc_r+0x1e>
 800424a:	42bc      	cmp	r4, r7
 800424c:	4622      	mov	r2, r4
 800424e:	4631      	mov	r1, r6
 8004250:	bf28      	it	cs
 8004252:	463a      	movcs	r2, r7
 8004254:	f7ff fed0 	bl	8003ff8 <memcpy>
 8004258:	4631      	mov	r1, r6
 800425a:	4640      	mov	r0, r8
 800425c:	f7ff fef4 	bl	8004048 <_free_r>
 8004260:	e7e1      	b.n	8004226 <_realloc_r+0x1e>
 8004262:	4635      	mov	r5, r6
 8004264:	e7df      	b.n	8004226 <_realloc_r+0x1e>
	...

08004268 <_sbrk_r>:
 8004268:	b538      	push	{r3, r4, r5, lr}
 800426a:	4d06      	ldr	r5, [pc, #24]	; (8004284 <_sbrk_r+0x1c>)
 800426c:	2300      	movs	r3, #0
 800426e:	4604      	mov	r4, r0
 8004270:	4608      	mov	r0, r1
 8004272:	602b      	str	r3, [r5, #0]
 8004274:	f7fc fd2e 	bl	8000cd4 <_sbrk>
 8004278:	1c43      	adds	r3, r0, #1
 800427a:	d102      	bne.n	8004282 <_sbrk_r+0x1a>
 800427c:	682b      	ldr	r3, [r5, #0]
 800427e:	b103      	cbz	r3, 8004282 <_sbrk_r+0x1a>
 8004280:	6023      	str	r3, [r4, #0]
 8004282:	bd38      	pop	{r3, r4, r5, pc}
 8004284:	20000178 	.word	0x20000178

08004288 <__malloc_lock>:
 8004288:	4801      	ldr	r0, [pc, #4]	; (8004290 <__malloc_lock+0x8>)
 800428a:	f000 b811 	b.w	80042b0 <__retarget_lock_acquire_recursive>
 800428e:	bf00      	nop
 8004290:	2000017c 	.word	0x2000017c

08004294 <__malloc_unlock>:
 8004294:	4801      	ldr	r0, [pc, #4]	; (800429c <__malloc_unlock+0x8>)
 8004296:	f000 b80c 	b.w	80042b2 <__retarget_lock_release_recursive>
 800429a:	bf00      	nop
 800429c:	2000017c 	.word	0x2000017c

080042a0 <_malloc_usable_size_r>:
 80042a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042a4:	1f18      	subs	r0, r3, #4
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	bfbc      	itt	lt
 80042aa:	580b      	ldrlt	r3, [r1, r0]
 80042ac:	18c0      	addlt	r0, r0, r3
 80042ae:	4770      	bx	lr

080042b0 <__retarget_lock_acquire_recursive>:
 80042b0:	4770      	bx	lr

080042b2 <__retarget_lock_release_recursive>:
 80042b2:	4770      	bx	lr

080042b4 <_init>:
 80042b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b6:	bf00      	nop
 80042b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ba:	bc08      	pop	{r3}
 80042bc:	469e      	mov	lr, r3
 80042be:	4770      	bx	lr

080042c0 <_fini>:
 80042c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042c2:	bf00      	nop
 80042c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042c6:	bc08      	pop	{r3}
 80042c8:	469e      	mov	lr, r3
 80042ca:	4770      	bx	lr
